%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: Untitled-2
%%Creator: Adobe InDesign CC 2015 (Macintosh)
%%For: rck4
%%CreationDate: 4/20/16, 2:44 PM
%%BoundingBox: 0 0 504 504
%%HiResBoundingBox: 0 0 504 504
%%CropBox: 0 0 504 504
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%ADOBeginClientInjection: DocumentHeader "InDesignDefaultInsertProc"
%ADO_ContainsXMP NoMain
%ADOEndClientInjection: DocumentHeader "InDesignDefaultInsertProc"
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -504 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 504 li
504 504 li
504 0 li
cp
clp
471.044 217.327 mo
471.392 206.356 468.973 197.103 466.179 190.737 cv
465.214 179.889 461.81 170.416 457.898 163.457 cv
456.262 160.301 454.505 157.616 452.783 155.489 cv
448.44 142.176 440.812 132.109 430.009 125.629 cv
429.503 125.323 428.844 125.477 428.523 125.974 cv
428.366 126.221 428.238 126.505 428.124 126.81 cv
427.944 127.041 427.761 127.289 427.602 127.572 cv
427.007 128.629 426.669 130.01 426.62 131.72 cv
425.332 130.321 423.985 128.937 422.516 127.587 cv
416.657 122.209 409.584 117.644 402.747 113.229 cv
394.345 107.802 386.406 102.678 383.643 97.5515 cv
383.41 97.1134 382.913 96.8925 382.435 97.0019 cv
382.158 97.065 381.95 97.2436 381.799 97.4659 cv
381.101 98.1351 380.521 99.4204 380.49 100.17 cv
380.232 106.37 382.417 118.301 390.54 131.412 cv
389.97 130.904 389.438 130.39 388.987 129.869 cv
388.743 129.59 388.385 129.507 388.03 129.547 cv
387.886 129.515 387.74 129.507 387.591 129.567 cv
386.724 129.912 385.928 131.945 385.97 132.876 cv
386.238 139.069 394.381 150.512 404.15 160.822 cv
401.675 160.007 399.523 159.297 397.764 158.462 cv
397.468 158.32 397.14 158.36 396.846 158.494 cv
396.753 158.496 396.655 158.522 396.544 158.614 cv
395.888 159.147 394.965 161.33 395.159 162.149 cv
396.575 168.094 401.175 175.547 407.705 182.866 cv
407.048 188.07 407.618 193.416 409.397 198.942 cv
408.16 197.188 406.969 195.414 405.913 193.608 cv
405.699 193.241 405.297 193.032 404.875 193.069 cv
404.458 193.099 404.095 193.377 403.943 193.768 cv
403.928 193.801 403.924 193.841 403.91 193.871 cv
403.466 194.366 403.105 195.076 402.917 195.572 cv
400.292 202.468 403.199 215.854 407.967 227.312 cv
404.495 223.838 400.549 220.635 396.008 218.053 cv
395.706 217.881 395.346 217.861 395.031 218 cv
394.812 218.095 394.658 218.272 394.54 218.471 cv
394.002 219.024 393.464 220.141 393.334 220.688 cv
391.581 228.046 394.658 243.144 400.618 257.629 cv
398.985 262.177 398.074 267.007 398.115 273.174 cv
397.938 272.856 397.758 272.585 397.584 272.28 cv
394.804 267.044 391.819 263.087 388.808 260.869 cv
388.539 260.67 388.194 260.605 387.874 260.69 cv
387.549 260.785 387.283 261.011 387.152 261.319 cv
387.13 261.37 387.116 261.433 387.091 261.483 cv
386.684 261.989 386.315 262.681 386.144 263.082 cv
383.005 270.412 384.658 283.569 387.546 299.141 cv
387.517 299.094 387.487 299.035 387.454 298.992 cv
387.424 298.934 387.388 298.884 387.355 298.829 cv
387.071 298.33 386.779 297.823 386.505 297.342 cv
383.879 292.771 381.805 289.163 381.206 284.98 cv
381.137 284.508 380.77 284.128 380.297 284.056 cv
379.822 283.978 379.354 284.217 379.141 284.643 cv
379.092 284.736 379.052 284.851 379.006 284.947 cv
378.673 285.397 378.367 285.941 378.162 286.345 cv
375.32 292.03 373.036 305.782 375.294 321.269 cv
374.036 319.189 372.721 317.409 371.377 316.132 cv
371.112 315.876 370.743 315.775 370.384 315.852 cv
370.03 315.934 369.733 316.183 369.602 316.524 cv
369.598 316.535 369.592 316.554 369.588 316.566 cv
369.142 317.077 368.76 317.851 368.58 318.317 cv
365.757 325.532 363.481 338.957 363.65 351.629 cv
362.677 350.254 361.603 348.999 360.403 347.901 cv
360.174 347.694 359.869 347.589 359.564 347.615 cv
359.251 347.649 358.969 347.803 358.782 348.051 cv
358.661 348.215 358.549 348.419 358.43 348.591 cv
358.34 348.638 358.25 348.691 358.179 348.786 cv
354.686 353.444 351.274 361.155 349.242 374.46 cv
348.539 370.77 348.227 367.345 349.001 365.151 cv
349.155 364.71 349.02 364.219 348.656 363.931 cv
348.295 363.639 347.782 363.607 347.388 363.859 cv
345.278 365.176 343.224 367.706 341.414 370.927 cv
337.879 376.446 335.151 384.51 334.33 392.403 cv
328.306 396.766 322.396 403.623 317.428 412.095 cv
316.676 413.38 316.029 414.66 315.424 415.929 cv
307.914 417.872 303.565 421.31 298.92 426.533 cv
298.057 427.509 297.199 428.514 296.295 429.581 cv
291.104 435.691 285.219 442.612 274.894 446.252 cv
268.037 448.677 260.379 450.299 252.285 451.711 cv
244.206 450.296 236.579 448.668 229.732 446.252 cv
219.41 442.612 213.526 435.691 208.338 429.581 cv
207.43 428.514 206.573 427.509 205.706 426.533 cv
201.064 421.31 196.714 417.872 189.208 415.929 cv
188.602 414.66 187.955 413.38 187.2 412.095 cv
182.237 403.62 176.322 396.765 170.297 392.4 cv
169.478 384.504 166.748 376.435 163.211 370.917 cv
161.401 367.702 159.35 365.175 157.242 363.859 cv
156.846 363.607 156.338 363.639 155.976 363.931 cv
155.613 364.219 155.47 364.71 155.627 365.151 cv
156.402 367.345 156.091 370.767 155.39 374.456 cv
153.355 361.151 149.941 353.444 146.45 348.786 cv
146.379 348.691 146.288 348.638 146.199 348.588 cv
146.077 348.418 145.967 348.215 145.846 348.051 cv
145.661 347.803 145.38 347.649 145.071 347.615 cv
144.763 347.589 144.458 347.694 144.229 347.901 cv
143.029 348.999 141.953 350.254 140.979 351.629 cv
141.15 338.957 138.872 325.532 136.051 318.317 cv
135.869 317.851 135.49 317.077 135.045 316.569 cv
135.037 316.554 135.034 316.537 135.03 316.524 cv
134.896 316.183 134.603 315.934 134.247 315.852 cv
133.89 315.775 133.517 315.876 133.254 316.132 cv
131.912 317.409 130.594 319.189 129.335 321.273 cv
131.596 305.783 129.309 292.03 126.471 286.345 cv
126.266 285.941 125.958 285.397 125.627 284.947 cv
125.581 284.851 125.537 284.736 125.489 284.643 cv
125.275 284.217 124.808 283.978 124.333 284.056 cv
123.86 284.128 123.492 284.508 123.427 284.98 cv
122.827 289.163 120.75 292.771 118.128 297.342 cv
117.856 297.816 117.569 298.318 117.289 298.809 cv
117.251 298.874 117.212 298.925 117.176 298.992 cv
117.146 299.035 117.113 299.094 117.086 299.141 cv
119.976 283.569 121.631 270.412 118.486 263.082 cv
118.313 262.681 117.945 261.984 117.535 261.482 cv
117.514 261.429 117.5 261.37 117.479 261.319 cv
117.349 261.011 117.081 260.785 116.758 260.69 cv
116.435 260.605 116.093 260.67 115.821 260.869 cv
112.813 263.087 109.824 267.044 107.047 272.282 cv
106.87 272.588 106.69 272.856 106.516 273.174 cv
106.557 267.007 105.644 262.177 104.011 257.629 cv
109.972 243.144 113.047 228.046 111.296 220.688 cv
111.166 220.143 110.627 219.026 110.091 218.474 cv
109.975 218.272 109.821 218.095 109.602 218 cv
109.285 217.861 108.923 217.881 108.62 218.053 cv
104.084 220.633 100.135 223.836 96.6677 227.309 cv
101.432 215.851 104.339 202.468 101.712 195.572 cv
101.525 195.076 101.162 194.366 100.719 193.871 cv
100.706 193.841 100.698 193.801 100.686 193.768 cv
100.536 193.377 100.175 193.099 99.7534 193.069 cv
99.3361 193.032 98.933 193.241 98.7201 193.608 cv
97.6609 195.411 96.4735 197.184 95.2372 198.937 cv
97.0132 193.409 97.5816 188.07 96.9283 182.866 cv
103.455 175.547 108.056 168.094 109.469 162.149 cv
109.667 161.33 108.744 159.147 108.089 158.614 cv
107.976 158.522 107.878 158.499 107.783 158.494 cv
107.493 158.36 107.164 158.32 106.865 158.462 cv
105.106 159.297 102.956 160.007 100.482 160.822 cv
110.254 150.512 118.391 139.069 118.663 132.876 cv
118.703 131.945 117.905 129.912 117.038 129.567 cv
116.888 129.507 116.745 129.515 116.601 129.547 cv
116.247 129.507 115.885 129.59 115.644 129.869 cv
115.19 130.39 114.661 130.904 114.089 131.412 cv
122.214 118.301 124.4 106.37 124.142 100.17 cv
124.112 99.4204 123.532 98.1351 122.83 97.4659 cv
122.68 97.2436 122.474 97.065 122.198 97.0019 cv
121.716 96.8925 121.221 97.1134 120.986 97.5515 cv
118.224 102.678 110.288 107.802 101.886 113.229 cv
95.0457 117.644 87.9721 122.209 82.1161 127.587 cv
80.6453 128.935 79.3024 130.321 78.0101 131.72 cv
77.9639 130.005 77.6215 128.629 77.0299 127.572 cv
76.8673 127.289 76.6889 127.04 76.5061 126.81 cv
76.3953 126.503 76.2628 126.221 76.1045 125.974 cv
75.785 125.477 75.1288 125.323 74.6208 125.629 cv
63.8167 132.109 56.1933 142.176 51.8455 155.49 cv
50.1257 157.619 48.3669 160.307 46.7291 163.465 cv
42.8174 170.422 39.4151 179.892 38.4494 190.737 cv
35.6601 197.103 33.2381 206.356 33.5848 217.327 cv
31.0404 225.908 29.2832 239.905 35.4818 257.727 cv
35.6458 258.198 35.8431 258.641 36.0171 259.107 cv
35.584 264.465 35.9639 269.782 37.1598 275.193 cv
37.2664 283.748 40.1058 297.836 47.5149 312.473 cv
48.1092 321.573 51.5245 332.515 58.0959 342.578 cv
60.2893 350.536 66.7397 363.214 80.484 374.283 cv
83.1105 382.033 91.0361 392.42 104.352 399.99 cv
107.38 407.087 115.805 415.056 128.487 420.152 cv
131.626 425.913 139.29 434.93 156.993 437.355 cv
163.287 443.943 178.968 449.248 190.885 449.909 cv
195.517 450.166 199.411 449.922 203.174 449.69 cv
209.485 449.293 215.508 448.949 224.096 451.187 cv
224.14 451.204 224.183 451.223 224.228 451.238 cv
227.77 452.586 231.046 453.688 234.317 454.656 cv
232.335 454.977 li
217.547 457.441 199.195 460.612 192.112 465.225 cv
191.974 465.307 191.188 466.363 191.115 466.516 cv
190.021 468.706 191.705 472.446 193.349 474.149 cv
195.312 476.184 197.763 476.817 199.904 475.849 cv
199.946 475.824 199.982 475.804 200.022 475.781 cv
207.978 470.938 226.486 464.131 243.323 460.79 cv
246.593 460.14 249.549 459.55 252.311 458.983 cv
255.072 459.55 258.035 460.14 261.307 460.79 cv
278.147 464.131 297.422 471.54 305.381 476.383 cv
305.417 476.403 305.457 476.42 305.496 476.44 cv
307.64 477.413 308.685 476.555 310.65 474.516 cv
312.293 472.808 313.275 468.826 312.175 466.636 cv
312.102 466.495 312.001 466.357 311.873 466.259 cv
306.38 461.95 287.081 457.441 272.297 454.977 cv
270.303 454.656 li
273.579 453.684 276.855 452.588 280.401 451.238 cv
280.445 451.223 280.49 451.203 280.534 451.187 cv
289.124 448.949 295.148 449.293 301.456 449.69 cv
305.218 449.922 309.113 450.166 313.751 449.909 cv
325.662 449.248 341.342 443.943 347.64 437.355 cv
365.342 434.93 373.003 425.913 376.145 420.152 cv
388.824 415.056 397.253 407.087 400.276 399.99 cv
413.591 392.42 421.518 382.033 424.146 374.283 cv
437.889 363.214 444.34 350.536 446.534 342.578 cv
453.104 332.515 456.522 321.573 457.118 312.473 cv
464.524 297.836 467.367 283.748 467.47 275.193 cv
468.668 269.782 469.048 264.465 468.616 259.107 cv
468.787 258.641 468.983 258.198 469.148 257.727 cv
475.346 239.905 473.588 225.908 471.044 217.327 cv
cp
465.34 195.714 mo
466.906 200.92 467.993 207.447 467.754 214.927 cv
466.25 232.052 457.6 250.507 441.547 259.742 cv
441.572 258.798 441.596 257.852 441.591 256.917 cv
441.651 256.837 441.746 256.789 441.785 256.691 cv
443.974 251.377 445.926 243.849 446.311 236.017 cv
454.017 232.409 463.943 220.776 465.251 198.613 cv
465.31 197.635 465.323 196.675 465.34 195.714 cv
cp
441.335 251.397 mo
441.045 247.746 440.51 244.215 439.616 240.935 cv
439.518 240.655 437.852 235.869 435.971 231.537 cv
434.054 226.526 431.454 221.24 427.895 215.946 cv
421.072 205.805 412.643 194.453 410.875 182.487 cv
410.875 182.484 410.875 182.477 410.875 182.471 cv
413.561 185.284 416.494 188.04 419.61 190.622 cv
434.133 202.651 441.789 214.506 443.706 227.929 cv
443.729 228.079 443.829 228.187 443.904 228.31 cv
444.797 236.4 443.398 244.825 441.335 251.397 cv
cp
463.128 196.618 mo
462.334 210.445 457.222 223.835 446.327 230.714 cv
446.272 229.644 446.151 228.578 446.022 227.515 cv
447.538 222.849 448.718 215.527 447.935 207.386 cv
455.074 198.942 458.101 178.875 454.584 162.058 cv
459.277 170.073 463.56 182.321 463.128 196.618 cv
cp
429.994 128.25 mo
440.41 134.883 447.438 144.69 451.397 158.251 cv
454.089 170.321 454.44 185.767 447.621 200.052 cv
447.169 200.496 li
447.82 192.828 448.178 184.52 444.191 175.218 cv
444.391 166.08 441.568 150.909 430.877 136.796 cv
430.07 133.188 429.638 130.075 429.994 128.25 cv
cp
385.086 108.275 mo
384.466 105.786 384.088 103.552 383.906 101.65 cv
387.714 106.098 394.202 110.322 401.555 115.072 cv
408.319 119.436 415.311 123.951 421.032 129.202 cv
435.776 142.748 440.806 159.465 441.801 170.426 cv
439.949 167.225 437.524 163.905 434.405 160.457 cv
429.25 154.162 420.863 146.163 411.724 138.669 cv
400.866 129.766 389.005 118.84 385.086 108.275 cv
cp
395.04 142.464 mo
392.796 139.247 391.065 136.298 390.112 133.906 cv
393.86 136.92 399.215 139.736 405.234 142.886 cv
413.745 147.346 423.399 152.397 430.135 159.131 cv
444.137 173.134 445.769 184.956 445.304 195.495 cv
444.183 192.357 442.705 189.229 440.739 186.213 cv
437.879 180.207 432.721 173.039 421.862 164.158 cv
415.494 158.944 402.672 150.755 395.04 142.464 cv
cp
438.321 186.598 mo
435.925 183.472 433.338 180.638 430.802 178.137 cv
431.905 179.157 433.013 180.227 434.134 181.401 cv
435.732 183.071 437.098 184.819 438.321 186.598 cv
cp
399.088 161.365 mo
400.46 161.886 401.915 162.397 403.567 162.938 cv
406.762 163.986 410.439 165.2 414.449 167.065 cv
416.327 168.713 418.198 170.253 420.011 171.647 cv
427.242 177.192 440.087 188.625 444.85 202.91 cv
444.911 203.091 445.049 203.212 445.179 203.336 cv
446.494 210.41 446.097 217.124 445.094 222.273 cv
445.091 222.257 445.087 222.245 445.085 222.233 cv
444.374 213.954 437.82 201.473 427.341 190.46 cv
416.829 179.41 403.428 171.466 399.088 161.365 cv
cp
405.205 199.76 mo
405.209 198.745 405.294 197.818 405.422 196.949 cv
409.979 204.098 415.927 210.795 421.186 216.354 cv
429.271 228.801 436.873 241.539 439.304 254.22 cv
439.829 267.765 436.769 282.994 432.886 293.931 cv
433.066 291.948 433.151 289.971 433.101 288.028 cv
433.101 287.972 433.088 287.914 433.082 287.858 cv
432.863 286.684 li
433.324 274.292 431.682 260.897 425.428 245.265 cv
419.849 231.318 405.665 213.467 405.205 199.76 cv
cp
396.134 222.531 mo
396.157 221.917 396.201 221.333 396.266 220.789 cv
406.201 226.895 413.951 236.718 419.325 246.566 cv
426.783 264.793 431.797 286.925 429.096 302.857 cv
429.087 302.899 429.117 302.932 429.116 302.972 cv
427.537 309.426 425.157 315.252 422.929 318.927 cv
422.937 317.799 422.92 316.692 422.893 315.593 cv
423.995 306.07 422.799 291.393 414.463 269.105 cv
407.987 251.778 397.194 235.594 396.134 222.531 cv
cp
412.091 331.343 mo
412.343 328.079 412.355 324.172 412.001 319.526 cv
410.474 299.7 401.882 280.93 401.572 266.113 cv
401.837 263.315 402.351 260.804 403.089 258.406 cv
403.497 259.32 403.913 260.228 404.341 261.129 cv
405.75 264.068 li
413.139 279.429 421.484 296.83 420.691 321.499 cv
418.165 331.959 413.978 337.899 410.582 341.167 cv
411.34 338.572 411.936 335.893 412.266 333.131 cv
412.279 333.046 412.279 332.961 412.266 332.875 cv
412.264 332.843 412.199 332.264 412.091 331.343 cv
cp
388.664 263.597 mo
392.831 267.364 397.007 274.861 400.51 284.525 cv
400.654 285.385 400.798 286.252 400.966 287.16 cv
401.827 291.857 402.817 295.833 403.774 299.679 cv
406.207 309.467 408.504 318.796 408.085 338.039 cv
405.75 351.007 398.235 361.602 392.313 366.834 cv
392.464 366.501 392.625 366.165 392.767 365.832 cv
392.813 365.73 394.707 362.303 394.715 362.184 cv
394.723 362.066 394.781 361.621 394.871 360.932 cv
399.414 349.392 399.775 331.729 398.023 320.345 cv
396.41 309.856 389.62 288.113 387.776 273.656 cv
387.635 269.662 387.878 266.236 388.664 263.597 cv
cp
379.656 289.618 mo
379.731 289.346 379.807 289.08 379.885 288.822 cv
380.933 292.026 382.664 295.058 384.604 298.432 cv
386.813 302.274 389.368 306.75 391.568 312.627 cv
394.48 330.252 396.144 352.317 388.699 369.414 cv
385.774 374.377 382.376 379.07 379.086 382.704 cv
381.013 379.338 382.561 375.839 383.382 372.343 cv
383.392 372.296 383.402 372.244 383.408 372.193 cv
383.408 372.193 383.607 370.1 383.869 367.299 cv
384.596 363.214 384.966 358.989 385.05 354.753 cv
385.161 353.557 385.233 352.796 385.233 352.786 cv
385.285 351.842 385.199 350.597 385.007 349.162 cv
384.613 336.85 382.326 325.214 380.76 318.429 cv
377.775 305.503 378.188 297.151 379.656 289.618 cv
cp
371.441 366.11 mo
371.441 351.209 368.108 337.056 369.382 325.06 cv
369.887 322.807 370.445 320.754 371.038 318.988 cv
374.609 323.244 377.96 331.044 380.209 338.26 cv
382.313 351.906 382.962 371.484 374.026 386.544 cv
371.499 390.088 368.661 393.358 365.942 396.137 cv
366.836 394.146 367.556 391.968 368.163 389.708 cv
370.299 383.783 371.441 376.354 371.441 366.11 cv
cp
359.135 351.521 mo
359.351 351.152 359.581 350.839 359.802 350.496 cv
362.281 353.078 364.211 356.358 365.51 360.392 cv
366.899 373.964 367.99 389.051 359.365 402.101 cv
355.764 405.633 350.102 409.221 344.757 411.763 cv
352.202 403.212 355.848 390.831 355.551 375.154 cv
355.311 362.378 357.188 356.601 359.135 351.521 cv
cp
340.204 386.116 mo
340.471 380.126 341.387 376.213 342.633 373.24 cv
343.796 370.946 345.084 368.987 346.421 367.543 cv
346.192 372.144 347.774 378.359 349.154 383.635 cv
349.07 384.379 li
347.555 398.036 346.717 405.56 339.458 414.133 cv
339.458 414.135 339.458 414.135 339.458 414.135 cv
337.273 416.575 335.045 418.685 332.596 420.614 cv
333.375 419.454 334.08 418.307 334.7 417.167 cv
335.424 415.931 336.043 414.625 336.561 413.271 cv
340.31 404.136 339.789 395.439 340.204 386.116 cv
cp
321.295 414.611 mo
325.97 404.774 331.509 399.576 335.11 395.149 cv
334.594 404.134 331.643 418.943 318.924 428.527 cv
316.414 430.144 313.878 431.64 311.565 432.932 cv
315.878 428.442 317.503 422.601 321.295 414.611 cv
cp
183.332 414.611 mo
187.13 422.601 188.752 428.442 193.064 432.932 cv
190.751 431.637 188.216 430.144 185.707 428.527 cv
172.984 418.943 170.038 404.134 169.518 395.149 cv
173.118 399.576 178.659 404.774 183.332 414.611 cv
cp
158.208 367.543 mo
159.549 368.996 160.843 370.962 162.01 373.268 cv
163.249 376.238 164.159 380.144 164.427 386.116 cv
164.838 395.449 164.322 404.155 168.084 413.304 cv
168.59 414.621 169.19 415.887 169.891 417.095 cv
170.522 418.258 171.237 419.429 172.031 420.611 cv
169.579 418.68 167.35 416.564 165.161 414.119 cv
157.911 405.553 157.077 398.027 155.56 384.379 cv
155.476 383.635 li
156.859 378.359 158.438 372.144 158.208 367.543 cv
cp
139.12 360.401 mo
140.415 356.362 142.349 353.081 144.828 350.496 cv
145.048 350.836 145.278 351.148 145.492 351.518 cv
147.441 356.597 149.321 362.374 149.082 375.154 cv
148.783 390.831 152.428 403.212 159.876 411.763 cv
154.531 409.221 148.872 405.635 145.271 402.106 cv
136.643 389.055 137.734 373.972 139.12 360.401 cv
cp
133.592 318.988 mo
134.183 320.754 134.743 322.802 135.245 325.051 cv
136.525 337.048 133.186 351.206 133.186 366.11 cv
133.186 376.354 134.332 383.781 136.469 389.706 cv
137.075 391.967 137.794 394.146 138.686 396.136 cv
135.965 393.357 133.128 390.086 130.603 386.538 cv
121.667 371.472 122.316 351.892 124.423 338.246 cv
126.678 331.034 130.023 323.241 133.592 318.988 cv
cp
120.025 298.432 mo
121.965 295.06 123.697 292.026 124.748 288.827 cv
124.828 289.09 124.906 289.366 124.985 289.65 cv
126.442 297.171 126.849 305.518 123.869 318.429 cv
122.306 325.211 120.019 336.845 119.623 349.153 cv
119.429 350.591 119.344 351.84 119.396 352.786 cv
119.396 352.796 119.469 353.56 119.583 354.756 cv
119.663 359.002 120.036 363.232 120.767 367.323 cv
121.031 370.109 121.225 372.193 121.225 372.193 cv
121.229 372.244 121.239 372.296 121.249 372.343 cv
122.072 375.839 123.617 379.339 125.548 382.707 cv
122.254 379.074 118.862 374.383 115.936 369.42 cv
108.484 352.324 110.149 330.261 113.059 312.634 cv
115.261 306.753 117.815 302.274 120.025 298.432 cv
cp
104.121 284.513 mo
107.623 274.853 111.798 267.36 115.962 263.597 cv
116.753 266.233 116.996 269.661 116.857 273.652 cv
115.013 288.111 108.219 309.856 106.605 320.345 cv
104.854 331.73 105.215 349.397 109.759 360.935 cv
109.848 361.623 109.906 362.066 109.916 362.184 cv
109.926 362.303 111.815 365.73 111.863 365.832 cv
112.005 366.165 112.168 366.497 112.318 366.833 cv
106.394 361.6 98.8783 350.998 96.5469 338.028 cv
96.1252 318.792 98.4236 309.465 100.856 299.679 cv
101.813 295.833 102.802 291.857 103.665 287.16 cv
103.832 286.249 103.977 285.377 104.121 284.513 cv
cp
92.5373 331.353 mo
92.4322 332.267 92.366 332.843 92.3631 332.875 cv
92.3546 332.961 92.3546 333.046 92.3646 333.131 cv
92.697 335.894 93.2929 338.572 94.0527 341.167 cv
90.649 337.899 86.4624 331.958 83.938 321.492 cv
83.148 296.826 91.4924 279.429 98.8783 264.068 cv
100.289 261.129 li
100.719 260.228 101.132 259.32 101.541 258.408 cv
102.279 260.808 102.795 263.323 103.056 266.119 cv
102.747 280.937 94.155 299.704 92.6322 319.526 cv
92.2739 324.176 92.2884 328.088 92.5373 331.353 cv
cp
108.364 220.789 mo
108.429 221.333 108.472 221.915 108.494 222.526 cv
107.436 235.591 96.6433 251.776 90.1655 269.105 cv
81.834 291.39 80.6336 306.061 81.7361 315.584 cv
81.7087 316.684 81.6915 317.795 81.7002 318.922 cv
79.4708 315.246 77.0918 309.423 75.513 302.97 cv
75.5087 302.929 75.5419 302.898 75.5332 302.857 cv
72.8333 286.928 77.8446 264.802 85.3024 246.575 cv
90.6764 236.727 98.428 226.897 108.364 220.789 cv
cp
99.2108 196.947 mo
99.3376 197.818 99.421 198.747 99.4252 199.764 cv
98.9632 213.467 84.7829 231.318 79.2031 245.265 cv
72.9484 260.899 71.3077 274.296 71.7667 286.686 cv
71.548 287.858 li
71.5408 287.914 71.5323 287.972 71.5323 288.028 cv
71.4789 289.971 71.5668 291.948 71.7467 293.931 cv
67.8609 282.995 64.8026 267.771 65.3293 254.228 cv
67.7529 241.547 75.3547 228.805 83.446 216.358 cv
88.7032 210.795 94.6528 204.098 99.2108 196.947 cv
cp
65.017 240.935 mo
64.1204 244.215 63.5835 247.746 63.2942 251.399 cv
61.2318 244.831 59.8358 236.408 60.7253 228.321 cv
60.803 228.195 60.9038 228.083 60.9268 227.929 cv
62.8438 214.506 70.4989 202.651 85.0203 190.622 cv
88.1348 188.04 91.0708 185.284 93.7549 182.471 cv
93.7549 182.475 93.7549 182.479 93.7577 182.484 cv
91.9889 194.449 83.5611 205.805 76.7378 215.946 cv
73.1743 221.243 70.5752 226.534 68.6582 231.549 cv
66.7728 235.877 65.1105 240.655 65.017 240.935 cv
cp
101.062 162.938 mo
102.715 162.397 104.176 161.886 105.546 161.361 cv
101.203 171.466 87.7995 179.41 77.2875 190.46 cv
66.8131 201.471 60.259 213.95 59.5452 222.228 cv
59.5437 222.241 59.5394 222.253 59.535 222.27 cv
58.5348 217.122 58.1361 210.41 59.4501 203.336 cv
59.5839 203.215 59.7236 203.091 59.7826 202.91 cv
64.545 188.625 77.3898 177.192 84.6217 171.647 cv
86.4351 170.252 88.3046 168.713 90.1814 167.065 cv
94.191 165.2 97.8666 163.986 101.062 162.938 cv
cp
66.3425 186.556 mo
67.5586 184.79 68.9129 183.057 70.4989 181.401 cv
71.6027 180.241 72.6995 179.183 73.7888 178.173 cv
71.276 180.657 68.7186 183.464 66.3425 186.556 cv
cp
114.52 133.908 mo
113.564 136.3 111.833 139.251 109.587 142.468 cv
101.953 150.759 89.135 158.946 82.7666 164.158 cv
71.9092 173.039 66.7526 180.209 63.8943 186.215 cv
61.9255 189.229 60.4475 192.357 59.325 195.498 cv
58.8645 184.961 60.4922 173.134 74.4998 159.131 cv
81.2294 152.397 90.8821 147.346 99.3993 142.886 cv
105.417 139.736 110.771 136.92 114.52 133.908 cv
cp
83.597 129.202 mo
89.3178 123.951 96.3108 119.436 103.074 115.072 cv
110.428 110.322 116.919 106.098 120.724 101.653 cv
120.544 103.552 120.163 105.786 119.547 108.275 cv
115.626 118.84 103.765 129.766 92.9057 138.669 cv
83.7653 146.165 75.3777 154.169 70.2225 160.461 cv
67.1053 163.906 64.6845 167.227 62.8322 170.426 cv
63.8254 159.465 68.8524 142.748 83.597 129.202 cv
cp
53.2271 158.271 mo
57.182 144.7 64.2138 134.885 74.6351 128.246 cv
74.9905 130.075 74.5632 133.188 73.7514 136.798 cv
63.0583 150.913 60.2374 166.088 60.4374 175.227 cv
56.4522 184.527 56.8106 192.831 57.4641 200.498 cv
57.0093 200.052 li
50.1947 185.775 50.5386 170.335 53.2271 158.271 cv
cp
50.0465 162.058 mo
46.5319 178.877 49.5542 198.944 56.6955 207.388 cv
55.9155 215.525 57.0927 222.845 58.6111 227.512 cv
58.4801 228.578 58.3593 229.642 58.3031 230.714 cv
47.417 223.838 42.3079 210.467 41.5062 196.655 cv
41.0643 182.345 45.3503 170.081 50.0465 162.058 cv
cp
39.2928 195.714 mo
39.3057 196.675 39.323 197.635 39.382 198.613 cv
40.6859 220.779 50.6164 232.413 58.3218 236.017 cv
58.7032 243.849 60.6548 251.377 62.8438 256.691 cv
62.8841 256.79 62.9776 256.839 63.0423 256.918 cv
63.0366 257.855 63.0611 258.798 63.0855 259.742 cv
47.0241 250.503 38.3745 232.036 36.8763 214.903 cv
36.6388 207.433 37.7284 200.912 39.2928 195.714 cv
cp
35.3479 222.539 mo
35.5566 223.976 35.7984 225.428 36.1149 226.907 cv
41.0184 249.895 55.3067 260.987 63.3533 265.035 cv
63.9347 272.387 65.2919 279.734 67.0707 286.334 cv
56.8006 281.959 47.9409 273.121 41.9078 262.348 cv
40.6816 259.861 39.5561 257.239 38.5876 254.451 cv
34.067 241.454 34.0469 230.564 35.3479 222.539 cv
cp
69.618 294.563 mo
70.7897 297.837 72.0388 300.739 73.2953 303.162 cv
74.9229 309.961 77.433 316.104 79.835 320.069 cv
62.1774 310.145 51.1776 297.665 44.9704 285.531 cv
41.1594 277.253 39.2726 269.459 39.192 261.716 cv
47.1422 278.89 60.3267 289.532 69.618 294.563 cv
cp
41.7278 283.684 mo
43.8982 288.909 46.8068 294.3 50.5185 299.985 cv
61.314 316.515 75.0943 324.127 83.3667 327.419 cv
86.7834 337.388 91.7228 342.44 94.9983 344.844 cv
95.0919 344.914 95.2042 344.925 95.3135 344.961 cv
95.6258 345.797 95.9511 346.62 96.2935 347.431 cv
78.5944 340.242 65.361 329.982 56.1831 318.698 cv
48.0014 306.268 43.655 293.504 41.7278 283.684 cv
cp
56.399 330.763 mo
53.8934 325.451 52.2427 320.097 51.395 315.111 cv
53.5969 318.891 56.0954 322.672 58.9766 326.365 cv
72.4562 343.654 88.5292 350.005 99.0136 353.039 cv
103.5 361.202 109.196 367.418 113.158 370.308 cv
105.005 366.417 93.6843 362.144 83.3135 356.791 cv
75.6268 352.823 63.6137 343.247 56.399 330.763 cv
cp
74.6625 362.198 mo
69.5116 356.64 66.0143 351.076 63.785 346.275 cv
66.7801 349.836 70.2139 353.188 74.1588 356.159 cv
84.1482 363.691 94.3205 367.251 103.292 370.387 cv
108.482 372.204 113.236 373.905 117.568 376.114 cv
122.133 382.91 127.766 389.003 132.322 392.341 cv
132.331 392.351 132.34 392.364 132.35 392.371 cv
126.132 388.877 108.219 382.776 95.371 375.979 cv
87.8872 372.014 80.5977 367.405 74.6625 362.198 cv
cp
95.813 387.695 mo
90.5828 383.105 86.91 378.235 84.8304 373.99 cv
86.4596 375.154 88.1463 376.305 89.9583 377.412 cv
100.575 383.89 111.316 387.953 120.793 391.541 cv
127.304 394.006 133.21 396.276 138.425 398.973 cv
140.409 400.926 142.286 402.601 143.868 403.883 cv
143.917 403.925 143.981 403.91 144.036 403.941 cv
144.423 404.312 144.826 404.68 145.249 405.047 cv
140.405 404.328 132.037 403.136 119.485 398.993 cv
111.722 396.43 103.087 392.895 95.813 387.695 cv
cp
120.479 410.299 mo
114.807 406.749 110.719 402.637 108.438 398.715 cv
111.168 400.059 114.079 401.295 117.215 402.359 cv
130.643 406.906 139.475 408.015 146.572 408.909 cv
148.29 409.123 149.859 409.335 151.376 409.564 cv
155.367 412.108 159.784 414.319 163.704 415.768 cv
165.857 418.153 168.019 420.168 170.224 421.946 cv
161.501 420.168 147.63 418.644 136.931 416.437 cv
131.052 415.226 125.442 413.17 120.479 410.299 cv
cp
155.108 430.847 mo
151.163 430.392 147.552 429.484 144.334 428.162 cv
138.302 425.288 134.663 421.482 132.52 418.278 cv
134.324 418.882 136.181 419.442 138.131 419.92 cv
145.242 421.666 152.021 422.673 158.575 423.642 cv
165.446 424.664 172.064 425.697 178.441 427.472 cv
180.606 428.682 182.844 429.804 185.206 430.882 cv
185.253 430.907 185.304 430.907 185.354 430.92 cv
185.983 431.319 186.61 431.706 187.235 432.087 cv
177.371 430.559 168.089 432.35 155.108 430.847 cv
cp
202.513 444.261 mo
199.991 444.414 197.396 444.562 194.464 444.538 cv
191.994 444.409 189.417 444.241 186.619 443.932 cv
185.699 443.828 184.847 443.681 183.972 443.555 cv
175.036 441.908 166.011 438.319 161.114 434.48 cv
166.526 434.925 171.25 434.793 175.795 434.629 cv
181.76 434.41 187.176 434.227 193.17 435.507 cv
195.79 436.944 198.081 438.123 199.661 438.935 cv
200.11 439.158 li
202.783 441.014 205.411 442.622 208.013 444.035 cv
206.152 444.068 204.335 444.152 202.513 444.261 cv
cp
196.361 473.368 mo
196.135 473.388 195.903 473.345 195.676 473.274 cv
195.339 473.026 195.073 472.783 194.929 472.634 cv
193.69 471.345 192.704 468.83 193.023 467.698 cv
197.979 464.115 216.661 459.813 232.695 457.139 cv
236.385 456.546 li
237.787 456.992 240.033 457.639 242.99 458.322 cv
239.38 459.049 235.958 459.763 233.062 460.444 cv
220.64 463.367 205.926 468.581 196.361 473.368 cv
cp
310.9 467.44 mo
311.849 470.278 309.578 473.747 308.141 473.622 cv
300.842 469.47 283.989 463.367 271.568 460.444 cv
262.431 458.293 248.271 455.847 238.432 453.54 cv
233.999 452.348 229.74 450.989 225.008 449.188 cv
216.96 446.122 209.387 442.939 201.365 437.366 cv
201.338 437.347 201.319 437.319 201.292 437.3 cv
201.129 437.205 200.995 437.09 200.841 436.989 cv
200.391 436.672 199.942 436.344 199.487 436.012 cv
196.062 433.141 194.419 428.881 192.433 423.658 cv
191.813 422.036 191.145 420.309 190.39 418.534 cv
191.155 418.777 191.878 419.045 192.574 419.326 cv
196.282 421.757 199.868 425.693 205.529 432.768 cv
210.04 438.408 217.415 443.559 224.514 446.39 cv
225.929 447.095 227.404 447.76 229.003 448.326 cv
239.223 451.926 251.004 453.802 263.479 455.776 cv
271.934 457.139 li
287.824 459.789 305.769 463.885 310.9 467.44 cv
cp
279.621 449.188 mo
274.799 451.026 270.463 452.397 265.937 453.603 cv
265.645 453.669 265.329 453.74 265.033 453.807 cv
263.823 453.613 li
262.061 453.333 260.317 453.055 258.587 452.776 cv
264.6 451.584 270.332 450.191 275.627 448.326 cv
277.226 447.76 278.702 447.095 280.117 446.39 cv
287.215 443.559 294.588 438.408 299.103 432.768 cv
304.76 425.693 308.348 421.757 312.056 419.324 cv
312.754 419.042 313.475 418.777 314.24 418.534 cv
313.486 420.307 312.816 422.036 312.2 423.658 cv
310.209 428.878 308.567 433.139 305.145 436.007 cv
304.68 436.351 304.215 436.688 303.753 437.012 cv
303.611 437.105 303.491 437.211 303.341 437.3 cv
303.313 437.317 303.297 437.343 303.271 437.362 cv
295.247 442.936 287.671 446.122 279.621 449.188 cv
cp
320.661 443.555 mo
319.781 443.681 318.932 443.828 318.011 443.932 cv
315.216 444.241 312.636 444.409 310.165 444.538 cv
307.236 444.562 304.638 444.414 302.115 444.261 cv
300.293 444.155 298.478 444.068 296.617 444.035 cv
299.22 442.622 301.849 441.014 304.523 439.158 cv
304.968 438.935 li
306.551 438.123 308.841 436.944 311.46 435.508 cv
317.454 434.227 322.873 434.41 328.837 434.629 cv
333.383 434.793 338.104 434.925 343.517 434.48 cv
338.619 438.319 329.594 441.908 320.661 443.555 cv
cp
360.295 428.162 mo
357.074 429.484 353.466 430.392 349.522 430.847 cv
336.541 432.35 327.259 430.559 317.395 432.087 cv
318.02 431.706 318.647 431.319 319.276 430.92 cv
319.327 430.907 319.376 430.907 319.426 430.882 cv
321.788 429.804 324.026 428.682 326.193 427.469 cv
332.566 425.696 339.19 424.661 346.057 423.642 cv
352.612 422.673 359.39 421.666 366.498 419.92 cv
368.451 419.442 370.309 418.882 372.109 418.278 cv
369.969 421.482 366.325 425.29 360.295 428.162 cv
cp
384.142 410.308 mo
379.181 413.172 373.577 415.23 367.699 416.437 cv
357.001 418.644 343.13 420.168 334.405 421.946 cv
336.609 420.168 338.773 418.153 340.926 415.768 cv
344.845 414.319 349.262 412.108 353.251 409.564 cv
354.773 409.335 356.343 409.123 358.06 408.909 cv
365.156 408.015 373.99 406.906 387.414 402.359 cv
390.55 401.295 393.461 400.059 396.193 398.712 cv
393.91 402.641 389.82 406.752 384.142 410.308 cv
cp
408.817 387.694 mo
401.545 392.892 392.91 396.43 385.144 398.993 cv
372.591 403.136 364.224 404.328 359.379 405.047 cv
359.802 404.68 360.206 404.312 360.593 403.942 cv
360.647 403.91 360.712 403.925 360.764 403.883 cv
362.344 402.601 364.221 400.926 366.204 398.975 cv
371.418 396.276 377.323 394.006 383.836 391.541 cv
393.31 387.953 404.056 383.89 414.67 377.412 cv
416.484 376.305 418.171 375.154 419.803 373.99 cv
417.722 378.235 414.047 383.104 408.817 387.694 cv
cp
429.966 362.2 mo
424.034 367.405 416.746 372.014 409.259 375.979 cv
396.409 382.777 378.496 388.879 372.279 392.371 cv
372.289 392.364 372.298 392.351 372.306 392.344 cv
376.863 389.003 382.497 382.91 387.065 376.11 cv
391.397 373.905 396.151 372.202 401.332 370.387 cv
410.308 367.251 420.482 363.691 430.47 356.159 cv
434.418 353.186 437.852 349.831 440.851 346.271 cv
438.619 351.073 435.122 356.637 429.966 362.2 cv
cp
448.233 330.76 mo
441.017 343.247 429.006 352.823 421.315 356.791 cv
410.949 362.144 399.622 366.421 391.468 370.313 cv
395.431 367.418 401.131 361.205 405.615 353.039 cv
416.104 350.005 432.174 343.654 445.655 326.365 cv
448.533 322.672 451.032 318.891 453.238 315.111 cv
452.39 320.097 450.738 325.448 448.233 330.76 cv
cp
448.45 318.697 mo
439.269 329.979 426.039 340.24 408.338 347.431 cv
408.682 346.62 409.006 345.797 409.318 344.961 cv
409.425 344.924 409.54 344.914 409.635 344.844 cv
412.913 342.44 417.847 337.388 421.265 327.419 cv
429.537 324.124 443.318 316.515 454.11 299.985 cv
457.823 294.295 460.732 288.904 462.905 283.674 cv
460.975 293.495 456.632 306.262 448.45 318.697 cv
cp
459.661 285.529 mo
453.455 297.663 442.454 310.144 424.795 320.069 cv
427.197 316.104 429.709 309.957 431.336 303.155 cv
432.596 300.73 433.842 297.836 435.011 294.563 cv
444.302 289.532 457.482 278.89 465.437 261.721 cv
465.356 269.462 463.471 277.25 459.661 285.529 cv
cp
466.043 254.451 mo
465.077 257.236 463.952 259.856 462.728 262.341 cv
456.696 273.115 447.834 281.954 437.561 286.334 cv
439.338 279.734 440.698 272.387 441.278 265.035 cv
449.323 260.987 463.61 249.895 468.517 226.907 cv
468.832 225.428 469.074 223.98 469.282 222.545 cv
470.583 230.569 470.562 241.458 466.043 254.451 cv
cp
true sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 1 nzopmsc
f
374.635 171.894 mo
374.517 169.254 li
130.253 169.254 li
130.136 171.894 li
123.813 314 161.089 400.682 251 452.964 cv
252.386 453.773 li
253.775 452.964 li
343.685 400.687 380.959 314 374.635 171.894 cv
cp
355.448 315.142 mo
354.404 318.694 353.283 322.186 352.112 325.631 cv
351.854 326.381 351.615 327.144 351.353 327.889 cv
350.166 331.289 348.901 334.619 347.592 337.907 cv
347.014 339.363 346.409 340.797 345.805 342.229 cv
345.051 344.021 344.271 345.784 343.482 347.54 cv
341.161 352.681 338.687 357.673 336.047 362.522 cv
330.524 358.396 252.386 300.019 252.386 300.019 cv
252.386 300.019 174.262 358.386 168.724 362.522 cv
166.073 357.643 163.583 352.62 161.252 347.447 cv
160.487 345.744 159.729 344.037 158.999 342.298 cv
158.382 340.832 157.763 339.365 157.169 337.877 cv
155.868 334.607 154.611 331.294 153.427 327.914 cv
153.159 327.148 152.91 326.359 152.648 325.586 cv
151.494 322.177 150.383 318.729 149.348 315.216 cv
149.263 314.928 149.174 314.64 149.09 314.352 cv
152.215 312.013 249.233 239.532 252.386 237.177 cv
255.539 239.532 352.568 312.025 355.685 314.352 cv
355.606 314.616 355.525 314.879 355.448 315.142 cv
cp
252.386 447.321 mo
217.285 426.63 190.485 400.423 171.412 367.375 cv
187.65 355.251 249.626 308.977 252.386 306.913 cv
255.153 308.981 317.251 355.43 333.32 367.447 cv
314.249 400.462 287.463 426.644 252.386 447.321 cv
cp
357.273 308.709 mo
252.386 230.281 li
147.48 308.621 li
139.08 277.556 134.979 242.115 134.979 201.646 cv
134.979 192.945 135.22 183.947 135.595 174.778 cv
140.811 174.778 363.962 174.778 369.18 174.778 cv
369.553 183.947 369.796 192.945 369.796 201.646 cv
369.796 242.153 365.689 277.625 357.273 308.709 cv
cp
f
375.529 110.318 mo
378.109 110.484 376.317 108.611 374.941 107.432 cv
373.569 106.256 373.371 103.708 371.131 100.765 cv
369.38 98.4719 366.978 97.6853 364.949 97.353 cv
361.812 92.0417 360.557 84.6024 357.549 79.0946 cv
354.296 73.145 349.774 69.7397 345.769 68.4747 cv
344.911 64.9985 343.292 61.3716 338.977 58.8761 cv
335.692 56.977 327.413 55.0268 312.929 52.7379 cv
305.693 51.6211 li
299.903 50.7331 293.913 49.817 290.612 49.199 cv
287.87 48.6858 285.278 47.6316 282.28 46.4133 cv
280.286 45.6045 278.027 44.6841 275.453 43.8293 cv
269.384 41.8058 261.756 40.8372 257.784 40.74 cv
255.529 38.7331 li
253.192 36.657 247.976 36.1425 242.831 35.7936 cv
242.14 35.7489 241.491 35.7043 241.094 35.6596 cv
241.108 35.4855 241.15 35.2726 241.209 35.1041 cv
241.357 34.6911 241.337 34.2327 241.15 33.8391 cv
240.966 33.4462 240.629 33.1359 240.22 32.9899 cv
236.988 31.8364 230.717 31.6744 226.135 31.5566 cv
224.461 31.5119 223.012 31.4759 222.387 31.3988 cv
221.17 31.2448 220.804 30.3202 220.739 30.1383 cv
220.561 29.5949 220.099 29.1466 219.539 29.015 cv
215.469 28.0764 206.566 27.1382 198.713 28.3947 cv
192.848 29.3315 188.93 31.7882 185.784 33.7585 cv
184.695 34.4436 183.755 35.035 182.866 35.4776 cv
180.367 36.7261 179.219 35.9763 179.171 35.9432 cv
178.624 35.5704 177.841 35.5115 177.286 35.8669 cv
172.941 38.6597 169.588 44.7611 168.606 48.4915 cv
167.577 49.0428 165.697 50.184 164.267 51.8564 cv
163.113 53.1984 162.135 55.1665 161.272 56.9057 cv
160.709 58.0414 160.125 59.2149 159.707 59.7338 cv
159.493 60.0051 158.442 59.8633 157.734 59.5576 cv
157.114 59.292 156.387 59.4258 155.912 59.9001 cv
155.754 60.0583 152.065 63.7701 150.452 67.3147 cv
149.937 68.4582 149.321 69.9911 148.672 71.6165 cv
148.184 72.8327 147.648 74.1424 147.11 75.4132 cv
142.574 75.0224 138.366 76.1529 135.974 78.1476 cv
134.822 79.1091 132.682 80.8929 133.616 82.9647 cv
134.506 84.9306 136.942 84.5577 137.86 84.416 cv
138.037 84.3895 138.564 84.3168 139.307 84.2699 cv
137.58 85.4983 135.785 86.9209 134.225 88.7013 cv
132.511 87.6694 131.325 86.6418 130.355 87.6125 cv
129.307 88.6602 130.231 91.2918 131.502 92.9138 cv
128.684 98.8835 130.054 104.05 131.433 107.492 cv
132.484 110.119 135.52 112.675 136.977 113.906 cv
137.17 114.068 137.364 114.235 137.463 114.324 cv
137.587 114.533 137.83 115.139 138.013 115.597 cv
138.54 116.918 139.262 118.731 140.385 120.227 cv
142.221 122.676 145.163 124.395 147.954 124.731 cv
148.814 126.15 150.77 129.17 152.717 130.763 cv
155.861 133.33 158.755 134.633 161.276 135.605 cv
164.342 142.473 170.67 142.298 172.926 141.615 cv
174.202 141.223 175.409 140.479 176.476 139.824 cv
177.382 139.272 178.506 138.58 179.04 138.58 cv
180.107 138.58 182.025 138.746 182.92 139.861 cv
183.522 140.613 184.162 141.211 184.734 141.738 cv
185.302 142.27 185.84 142.772 186.048 143.186 cv
186.137 143.364 186.271 143.769 186.39 144.124 cv
186.868 145.562 187.464 147.349 188.962 147.967 cv
189.477 148.18 190.292 148.329 191.269 147.842 cv
195.466 145.736 196.994 139.109 196.803 135.673 cv
197.07 135.382 197.306 135.033 197.465 134.611 cv
197.862 133.598 197.862 132.377 197.521 131.214 cv
197.91 130.946 198.251 130.654 198.564 130.375 cv
198.911 130.062 199.257 129.77 199.681 129.482 cv
201.382 129.484 202.139 130.261 202.286 130.863 cv
202.834 133.054 203.108 138.536 203.383 141.274 cv
203.655 144.015 208.178 149.632 210.645 151.55 cv
213.109 153.469 217.494 158.857 218.864 158.584 cv
219.961 160.228 223.249 162.143 224.894 162.693 cv
226.755 163.315 229.002 158.675 229.278 156.484 cv
229.924 151.311 228.546 146.619 226.355 146.068 cv
224.163 145.521 222.929 145.383 222.929 145.383 cv
222.929 145.383 219.631 143.774 220.05 142.231 cv
220.462 140.725 220.326 140.04 219.23 138.945 cv
218.853 138.568 219.877 137.913 220.95 137.319 cv
222.527 136.97 224.001 136.2 224.738 134.921 cv
225.24 134.722 226.974 134.931 228.138 135.074 cv
229.344 135.219 230.676 135.377 231.998 135.385 cv
233.993 139.573 238.49 145.308 242.317 149.971 cv
242.89 150.67 li
244.148 152.219 244.951 154.159 245.278 156.439 cv
245.422 157.437 244.931 159.897 244.485 161.592 cv
242.494 163.388 239.816 167.263 239.515 170.584 cv
239.472 171.044 239.625 171.498 239.938 171.839 cv
240.248 172.183 240.69 172.374 241.15 172.374 cv
254.443 172.374 li
254.877 172.374 255.295 172.202 255.605 171.894 cv
257.094 170.406 257.753 167.969 257.545 164.815 cv
259.131 163.874 261.744 161.823 260.796 158.975 cv
260.561 158.263 260.248 157.586 259.971 156.988 cv
259.069 155.028 259.114 154.76 259.486 154.44 cv
261.999 152.287 262.994 148.732 261.851 145.987 cv
260.927 143.766 261.573 142.683 263.861 140.745 cv
265.876 139.042 266.807 136.756 266.577 134.254 cv
268.853 134.242 270.217 133.352 270.997 132.484 cv
271.708 131.696 272.133 130.691 272.233 129.661 cv
274.13 129.341 277.449 128.648 280.688 127.314 cv
281.87 126.827 283.611 126.356 285.632 125.812 cv
287.379 125.341 289.357 124.808 291.287 124.17 cv
293.843 123.691 296.658 123.192 298.006 123.235 cv
299.625 123.275 li
299.932 123.284 300.303 123.292 300.68 123.304 cv
301.519 126.217 303.356 130.492 304.998 132.369 cv
306.915 134.56 309.107 138.945 308.835 140.589 cv
308.561 142.231 307.738 151.55 306.915 153.196 cv
306.095 154.837 302.531 159.792 301.986 161.14 cv
299.243 163.881 295.318 171.553 299.427 171.462 cv
312.125 171.462 li
314.223 171.462 314.042 166.619 314.314 163.607 cv
315.136 161.689 318.974 160.591 318.699 158.402 cv
318.426 156.208 320.066 154.015 321.713 152.099 cv
323.359 150.179 329.385 145.245 329.935 142.231 cv
330.482 139.221 329.385 134.56 331.032 132.641 cv
331.483 132.116 332.137 131.445 332.724 130.768 cv
332.884 130.804 333.069 130.859 333.215 130.886 cv
333.94 131.011 334.648 131.296 335.398 131.603 cv
336.341 131.988 337.407 132.422 338.692 132.613 cv
340.188 133.095 345.824 139.655 348.116 143.579 cv
350.351 147.416 353.957 155.419 353.711 161.663 cv
350.746 165.02 349.743 169.644 349.699 169.846 cv
349.596 170.329 349.72 170.835 350.03 171.22 cv
350.344 171.604 350.812 171.828 351.308 171.828 cv
365.558 171.828 li
366.348 171.828 367.024 171.269 367.173 170.491 cv
367.754 167.436 368.714 162.399 367.842 158.71 cv
367.812 158.584 367.768 158.466 367.712 158.35 cv
366.115 155.158 364.899 139.449 364.899 132.807 cv
364.9 131.459 li
364.923 126.02 364.938 122.74 360.928 119.736 cv
357.805 117.393 352.211 106.521 350.348 100.937 cv
349.278 97.7322 348.499 89.6474 347.875 83.1531 cv
347.477 79.0399 347.138 75.4866 346.782 73.7048 cv
346.772 73.6515 346.763 73.5955 346.753 73.5466 cv
351.878 74.9454 353.705 78.1887 356.528 84.3426 cv
358.726 89.1265 359.762 94.8149 362.334 99.185 cv
362.288 107.701 368.383 111.096 370.879 111.777 cv
373.498 112.491 375.013 113.107 377.116 114.23 cv
379.219 115.349 377.282 111.652 375.529 110.318 cv
cp
220.875 154.29 mo
221.381 153.102 222.501 150.832 222.52 149.725 cv
222.54 148.388 224.011 149.259 224.709 149.542 cv
225.624 149.907 226.505 151.73 226.355 153.378 cv
226.172 155.389 225.259 158.494 223.979 157.945 cv
222.7 157.396 220.326 155.567 220.875 154.29 cv
cp
137.542 81.1397 mo
137.696 81.0022 137.868 80.8519 138.081 80.6734 cv
140.507 78.6505 147.008 77.4165 152.896 80.3619 cv
157.862 82.843 161.288 88.9358 160.908 94.5718 cv
160.377 96.3391 158.532 96.5298 157.97 96.5376 cv
156.617 96.5678 155.406 95.9722 155.073 95.1432 cv
155.017 92.508 153.982 87.4765 150.35 84.1606 cv
146.052 80.2359 139.262 80.8987 137.542 81.1397 cv
cp
219.777 147.025 mo
221.056 147.577 220.144 151.185 218.864 152.281 cv
217.865 153.137 217.038 152.465 216.488 151.732 cv
215.941 151 210.826 146.619 208.819 144.242 cv
206.807 141.868 206.992 138.213 206.992 136.752 cv
206.992 134.743 210.462 136.387 211.739 136.938 cv
213.018 137.483 214.709 137.394 214.709 138.669 cv
214.709 139.948 214.845 141.319 215.941 141.685 cv
217.038 142.049 216.809 143.879 217.176 144.974 cv
217.539 146.068 218.497 146.48 219.777 147.025 cv
cp
253.481 165.249 mo
254.03 165.934 253.619 168.267 252.934 169.088 cv
252.462 169.652 250.58 169.392 248.552 169.36 cv
245.948 169.324 243.344 169.498 243.208 168.675 cv
243.03 167.62 244.951 165.028 245.948 164.43 cv
246.633 164.018 248.669 164.608 250.331 164.704 cv
252.661 164.839 252.934 164.563 253.481 165.249 cv
cp
309.29 168.357 mo
308.377 168.357 305.64 168.357 304.359 168.357 cv
303.078 168.357 301.436 168.357 301.436 167.442 cv
301.436 166.53 302.897 163.791 303.809 163.059 cv
304.725 162.326 305.821 163.059 306.551 163.424 cv
307.282 163.791 308.15 163.881 309.475 164.158 cv
310.388 164.345 310.34 165.297 310.34 166.21 cv
310.34 167.122 310.205 168.357 309.29 168.357 cv
cp
321.166 147.349 mo
319.707 148.991 316.417 152.648 315.867 154.29 cv
315.32 155.934 315.684 157.945 314.953 158.675 cv
314.223 159.403 312.03 160.684 311.486 161.414 cv
310.938 162.143 307.747 161.037 306.915 160.136 cv
306.37 159.541 307.933 157.554 308.835 155.794 cv
309.749 154.015 310.388 151.55 310.568 149.725 cv
310.755 147.895 312.03 142.781 312.397 140.589 cv
312.761 138.397 311.669 135.292 310.661 134.011 cv
309.655 132.734 308.052 129.546 307.213 128.396 cv
306.547 127.48 305.995 124.879 307.083 125.061 cv
308.166 125.242 311.849 126.158 313.494 126.705 cv
315.136 127.254 315.91 128.323 316.781 129.628 cv
317.876 131.271 318.243 134.194 318.426 135.657 cv
318.607 137.117 317.876 138.58 318.79 138.762 cv
319.707 138.945 320.432 135.841 320.432 134.56 cv
320.432 133.281 320.432 131.684 320.066 129.904 cv
319.737 128.291 322.624 129.993 323.905 131.088 cv
325.186 132.187 324.636 133.648 324.453 134.928 cv
324.272 136.202 325.366 139.128 325.553 141.138 cv
325.733 143.145 322.624 145.704 321.166 147.349 cv
cp
363.913 167.854 mo
363.635 168.782 363.093 169.224 361.993 169.224 cv
360.895 169.224 358.432 169.224 356.929 169.224 cv
355.422 169.224 353.774 169.224 353.912 167.58 cv
354.033 166.096 355.024 164.908 355.514 164.26 cv
355.509 164.337 li
355.694 164.045 355.918 163.852 356.166 163.702 cv
356.239 163.678 356.301 163.643 356.383 163.629 cv
356.405 163.603 356.425 163.578 356.444 163.552 cv
357.421 163.157 358.746 163.475 360.078 163.607 cv
361.511 163.752 363.481 164.456 364.279 165.369 cv
364.392 165.999 364.195 166.917 363.913 167.854 cv
cp
347.227 101.979 mo
349.045 107.427 354.875 119.306 358.951 122.363 cv
361.534 124.301 361.635 125.846 361.614 131.447 cv
361.613 132.807 li
361.613 138.627 362.658 154.643 364.591 159.358 cv
365.166 162.585 362.12 161.559 360.807 161.235 cv
359.594 160.929 357.763 160.74 356.965 159.743 cv
356.815 157.266 356.265 154.74 355.54 152.393 cv
354.632 145.738 351.743 141.657 347.106 134.928 cv
342.767 128.625 337.058 127.435 333.041 125.974 cv
329.021 124.516 325.196 121.111 323.359 119.076 cv
318.106 113.278 315.638 105.149 314.725 104.966 cv
313.813 104.784 312.26 107.16 310.568 108.802 cv
309.077 110.255 303.629 114.099 298.696 116.476 cv
293.833 118.816 288.285 120.677 283.531 121.771 cv
279.082 122.801 272.753 123.418 270.928 123.235 cv
269.1 123.051 265.629 122.501 265.629 121.593 cv
265.629 120.677 264.535 118.485 263.435 117.572 cv
262.345 116.655 260.515 115.195 261.064 114.099 cv
261.609 113.006 260.697 111.543 259.6 110.266 cv
258.506 108.985 261.064 108.072 262.159 106.793 cv
263.257 105.514 263.987 103.87 259.783 100.765 cv
257.46 99.0477 259.053 102.043 259.053 103.138 cv
259.053 104.711 258.035 104.65 257.043 105.149 cv
255.947 105.697 255.218 106.426 256.499 108.62 cv
257.214 109.852 257.591 110.813 256.68 111.908 cv
255.767 113.006 257.411 115.195 258.687 116.841 cv
259.967 118.485 258.414 120.677 257.411 121.956 cv
256.686 122.876 257.933 124.97 259.236 127.435 cv
260.881 130.541 257.35 132.945 257.591 132.734 cv
256.519 133.675 256.543 135.338 257.411 136.204 cv
258.506 137.299 258.466 139.204 258.141 139.858 cv
257.591 140.956 256.499 142.598 256.86 143.879 cv
257.335 145.537 257.411 145.886 257.227 147.349 cv
257.043 148.809 255.763 149.62 255.218 150.818 cv
254.304 152.829 255.947 155.389 256.13 158.675 cv
256.183 159.611 255.7 160.493 255 161.162 cv
253.481 162.117 252.075 162.358 250.879 162.238 cv
249.824 162.131 248.376 161.938 247.947 161.296 cv
248.316 159.711 248.742 157.426 248.535 155.973 cv
248.122 153.098 247.081 150.613 245.442 148.594 cv
244.862 147.885 li
244.712 147.704 244.509 147.455 244.334 147.238 cv
243.568 145.711 242.222 143.597 240.603 141.685 cv
238.594 139.308 238.044 133.966 237.315 131.956 cv
236.584 129.949 234.331 127.94 233.068 126.887 cv
228.684 123.235 229.544 120.54 228.546 117.936 cv
227.725 115.791 226.375 114.027 224.437 113.598 cv
221.969 113.051 219.916 112.775 219.503 110.992 cv
219.008 108.854 218.785 108.244 217.221 107.524 cv
214.845 106.426 214.665 102.589 213.931 102.775 cv
213.202 102.956 212.883 106.519 215.806 109.075 cv
217.18 110.278 216.799 114.161 220.875 115.791 cv
222.243 116.337 223.97 117.36 224.163 118.257 cv
224.575 120.174 224.637 122.513 225.807 124.56 cv
226.902 126.477 228.957 128.258 227.04 128.805 cv
226.014 129.102 224.709 127.983 223.614 127.621 cv
222.52 127.254 221.217 125.959 220.326 126.158 cv
218.68 126.523 219.597 128.529 218.497 129.081 cv
217.547 129.556 216.353 128.897 214.845 127.845 cv
213.316 126.782 211.854 125.951 210.415 125.606 cv
210.213 125.418 210.002 125.242 209.777 125.106 cv
209.25 124.792 209.365 123.187 207.719 122.501 cv
206.306 121.917 205.973 121.488 204.842 120.859 cv
203.61 120.174 202.106 120.446 203.337 122.229 cv
204.022 123.22 203.639 124.232 202.921 124.317 cv
201.745 123.644 199.747 122.987 198.336 123.257 cv
197.258 123.464 195.774 124.488 194.087 124.488 cv
191.691 124.488 190.732 122.501 190.182 121.593 cv
189.636 120.677 188.752 119.72 188.356 118.303 cv
187.9 116.655 187.625 114.282 186.53 115.013 cv
185.711 115.56 186.53 116.655 185.433 118.303 cv
184.695 119.408 182.326 117.754 181.963 116.476 cv
181.598 115.195 178.856 113.736 177.943 112.639 cv
177.031 111.543 175.567 109.534 174.838 110.079 cv
174.108 110.63 176.848 115.929 178.308 117.572 cv
179.771 119.215 178.856 121.226 178.856 122.868 cv
178.856 124.342 179.918 127.18 181.231 125.424 cv
182.326 123.964 183.789 123.964 185.433 124.516 cv
187.032 125.047 189.818 126.523 190.182 127.621 cv
190.509 128.594 192.423 129.715 193.873 130.98 cv
193.913 131.088 193.921 131.208 193.986 131.305 cv
194.578 132.187 194.53 133.172 194.383 133.452 cv
193.68 133.776 193.267 134.534 193.458 135.313 cv
193.547 135.675 193.557 136.213 193.523 136.816 cv
193.061 137.347 192.171 135.539 191.095 135.11 cv
190.182 134.743 190.178 135.104 191.279 137.299 cv
192.056 138.85 192.423 140.923 191.74 142.855 cv
191.285 143.624 190.751 144.277 190.132 144.69 cv
189.899 144.25 189.65 143.5 189.51 143.084 cv
189.342 142.582 189.181 142.099 188.991 141.716 cv
188.516 140.769 187.73 140.04 186.972 139.334 cv
186.464 138.86 185.935 138.369 185.488 137.808 cv
185.456 137.767 185.407 137.741 185.374 137.7 cv
185.124 137.291 184.752 136.802 184.154 136.204 cv
182.146 134.194 180.866 132.004 180.866 130.907 cv
180.866 129.81 179.65 128.659 178.856 130.541 cv
177.638 133.427 176.507 135.412 174.704 137.055 cv
173.777 137.623 172.823 138.207 171.967 138.466 cv
171.926 138.479 168.813 139.314 166.252 137.068 cv
165.523 136.285 164.621 134.98 164.835 133.464 cv
164.972 132.505 165.454 131.956 166.344 131.339 cv
167.232 130.725 167.604 129.207 169.428 128.876 cv
170.179 128.737 171.048 129.19 171.414 128.463 cv
171.823 127.642 169.906 126.271 168.554 126.377 cv
165.942 126.586 165.623 128.286 164.972 128.876 cv
164.353 129.434 161.95 129.033 161.008 131.948 cv
159.089 131.129 157.054 130.046 154.859 128.26 cv
152.499 125.933 152.409 123.433 152.642 122.501 cv
152.914 121.408 153.188 120.859 149.902 120.997 cv
147.064 121.115 145.363 120.474 143.892 119.165 cv
143.587 118.873 143.273 118.6 143.016 118.257 cv
142.155 117.105 141.552 115.593 141.069 114.381 cv
140.624 113.268 140.332 112.531 139.849 112.049 cv
139.687 111.887 139.452 111.69 139.095 111.389 cv
137.94 110.417 135.232 108.133 134.486 106.27 cv
132.484 101.265 132.635 97.3653 134.991 93.2254 cv
135.588 92.1755 136.354 91.2551 137.17 90.3937 cv
140.965 87.1116 144.702 86.759 145.792 88.1602 cv
146.827 89.4914 146.34 91.6286 148.167 92.1776 cv
149.511 92.5814 150.95 93.4852 151.765 94.7316 cv
151.782 94.961 151.798 95.1898 151.798 95.3885 cv
151.798 95.7289 li
151.898 96.0476 li
152.621 98.3338 155.147 99.8889 158.041 99.8262 cv
161.014 99.7628 163.396 98.0093 164.11 95.3519 cv
164.163 95.1554 li
164.181 94.9545 li
164.726 87.9104 160.6 80.5316 154.365 77.4179 cv
153.08 76.7753 151.759 76.3401 150.438 75.9989 cv
150.874 74.9454 151.307 73.8746 151.724 72.837 cv
152.357 71.2517 152.959 69.7477 153.447 68.6771 cv
154.437 66.498 156.488 64.1126 157.554 62.9489 cv
159.058 63.3218 161.049 63.3218 162.275 61.789 cv
162.914 60.9946 163.519 59.7785 164.218 58.3694 cv
164.994 56.8029 165.877 55.0291 166.761 53.9951 cv
168.297 52.2047 170.681 51.1223 170.706 51.11 cv
171.201 50.8892 171.558 50.4352 171.651 49.9019 cv
172.164 47.0927 174.967 41.7978 178.361 39.1726 cv
179.551 39.5887 181.563 39.8052 184.335 38.4207 cv
185.367 37.9034 186.419 37.2429 187.531 36.5455 cv
190.577 34.6341 194.028 32.4732 199.232 31.64 cv
206.087 30.5434 214.014 31.2651 218.017 32.0538 cv
218.65 33.1541 219.898 34.401 221.98 34.6601 cv
222.766 34.7594 224.217 34.7961 226.05 34.8428 cv
229.602 34.9344 234.708 35.0681 237.804 35.7331 cv
237.797 36.2965 237.893 36.9168 238.219 37.4802 cv
238.649 38.2258 239.389 38.7208 240.301 38.8727 cv
240.779 38.9517 241.55 39.0043 242.61 39.0756 cv
245.317 39.2577 251.653 39.6858 253.346 41.192 cv
256.057 43.6019 li
256.357 43.8717 256.749 44.02 257.148 44.02 cv
260.671 44.02 268.349 44.9281 274.415 46.9465 cv
276.883 47.7697 278.997 48.6289 281.043 49.4601 cv
284.206 50.7453 286.94 51.8564 290.004 52.432 cv
293.362 53.0603 299.381 53.9806 305.199 54.873 cv
312.414 55.9876 li
317.515 56.7921 333.045 59.2453 337.334 61.7242 cv
341.79 64.3026 342.515 68.4705 343.22 72.5002 cv
343.327 73.1126 343.436 73.7451 343.555 74.3474 cv
343.879 75.9664 344.23 79.6113 344.602 83.4691 cv
345.277 90.4772 346.041 98.4151 347.227 101.979 cv
cp
f
161.191 106.929 mo
159.782 107.537 156.662 110.079 157.566 112.167 cv
158.775 113.173 160.587 114.381 162.399 112.568 cv
164.211 110.756 162.8 108.944 162.8 108.944 cv
163.808 108.342 164.666 107.265 164.612 106.527 cv
164.562 105.79 162.6 106.325 161.191 106.929 cv
cp
f
169.701 132.093 mo
168.675 132.454 168.387 134.015 168.472 134.508 cv
168.675 135.742 169.275 136.583 169.91 136.152 cv
170.542 135.722 169.762 135.288 170.114 134.169 cv
170.398 133.273 170.804 133.809 171.11 133.301 cv
171.415 132.799 170.723 131.733 169.701 132.093 cv
cp
f
160.591 118.392 mo
159.081 117.847 157.848 116.751 157.166 117.707 cv
156.452 118.706 158.533 119.489 160.179 119.761 cv
161.822 120.04 162.095 118.942 160.591 118.392 cv
cp
f
339.195 77.2517 mo
339.049 74.7547 338.291 72.2124 337.884 70.1651 cv
337.469 68.1099 335.686 65.0976 331.579 63.865 cv
327.592 62.6669 325.003 63.5894 326.918 64.4119 cv
329.244 65.4057 331.02 65.5777 333.494 68.3855 cv
335.552 70.7127 336.575 74.1791 337.469 76.6054 cv
338.429 79.2061 339.294 78.9384 339.195 77.2517 cv
cp
f
150.452 105.697 mo
148.941 105.834 148.814 104.764 148.899 103.596 cv
148.988 102.317 149.262 101.176 148.715 101.038 cv
148.167 100.9 147.346 102.226 147.162 103.503 cv
146.945 105.021 146.796 107.432 148.349 107.614 cv
149.312 107.73 149.381 108.561 149.446 109.99 cv
149.535 112.09 150.038 113.414 150.723 114.099 cv
151.182 114.559 151.729 114.739 151.452 113.369 cv
151.173 111.968 151.39 110.997 151.546 109.349 cv
151.729 107.432 151.956 105.559 150.452 105.697 cv
cp
f
282.787 109.084 mo
279.488 110.027 274.576 110.183 274.815 111.315 cv
275.176 113.006 279.478 113.171 285.488 111.228 cv
290.307 109.67 294.692 106.197 294.254 105.226 cv
293.743 104.113 292.476 106.315 282.787 109.084 cv
cp
f
302.088 100.138 mo
300.85 100.844 299.063 101.727 299.725 102.353 cv
300.39 102.976 301.869 102.459 303.025 101.622 cv
304.225 100.742 305.125 99.2844 304.73 98.6885 cv
304.448 98.2547 303.169 99.5218 302.088 100.138 cv
cp
f
170.5 84.6428 mo
169.462 83.8562 165.772 86.423 166.113 90.3757 cv
166.289 92.4229 169.267 95.6037 170.088 92.5892 cv
166.798 88.6163 171.181 85.158 170.5 84.6428 cv
cp
f
176.596 79.9847 mo
176.775 78.9017 177.354 76.7529 175.088 76.3558 cv
171.638 75.7477 167.211 77.3129 165.018 80.4647 cv
164.235 81.5902 164.277 84.3368 165.841 82.725 cv
168.101 80.3978 171.87 79.299 173.763 79.6847 cv
173.368 81.0714 173.314 83.3618 173.76 85.3847 cv
174.202 87.3873 175.388 92.1776 171.732 94.0062 cv
170.994 94.3731 172.829 96.9292 175.388 95.6497 cv
177.364 94.6609 179.131 91.2874 177.349 86.423 cv
176.477 84.0425 176.254 82.0399 176.596 79.9847 cv
cp
f
339.616 96.9292 mo
337.884 96.9292 339.249 103.138 340.35 104.966 cv
341.443 106.793 344.55 109.349 345.278 108.62 cv
346.008 107.886 343.816 106.244 342.175 102.775 cv
340.91 100.105 340.712 96.9292 339.616 96.9292 cv
cp
f
314.042 61.4874 mo
312.397 61.1219 309.475 60.3922 309.29 61.1219 cv
308.98 62.3747 312.761 63.3138 314.586 63.498 cv
316.417 63.6787 318.426 64.2255 318.79 62.9489 cv
319.042 62.069 315.684 61.8538 314.042 61.4874 cv
cp
f
168.72 98.1151 mo
167.302 99.8277 165.112 101.265 161.203 101.748 cv
159.384 101.973 159.048 102.408 160.68 102.684 cv
163.673 103.187 166.498 102.417 167.986 101.951 cv
169.085 101.609 169.732 101.413 170.455 102.135 cv
171.185 102.867 171.46 104.509 172.097 104.509 cv
172.738 104.509 172.649 102.125 172.463 100.947 cv
172.19 99.2117 170.317 96.1829 168.72 98.1151 cv
cp
f
251.381 121.865 mo
252.661 121.865 255.087 119.594 254.304 119.124 cv
253.846 118.852 252.205 119.489 250.742 119.674 cv
249.729 119.797 250.558 121.865 251.381 121.865 cv
cp
f
250.375 127.254 mo
248.643 127.062 249.466 130.194 251.108 130.085 cv
252.479 129.993 255.278 128.301 254.764 127.435 cv
254.488 126.977 252.842 127.529 250.375 127.254 cv
cp
f
195.79 119.114 mo
195.056 118.654 193.868 117.336 193.428 117.602 cv
192.93 117.912 192.692 119.495 193.808 120.326 cv
194.922 121.159 198.182 121.66 198.53 120.993 cv
198.88 120.324 196.525 119.568 195.79 119.114 cv
cp
f
192.193 105.149 mo
192.285 104.419 190.821 104.6 189.908 104.328 cv
188.995 104.055 187.719 103.503 187.444 103.87 cv
187.146 104.261 188.448 105.697 189.453 105.79 cv
190.459 105.879 192.101 105.879 192.193 105.149 cv
cp
f
211.281 109.26 mo
210.734 108.895 208.954 108.325 208.452 109.075 cv
207.993 109.762 207.446 109.487 206.44 108.985 cv
205.966 108.745 204.616 108.072 204.343 108.435 cv
203.822 109.131 205.939 110.992 208.725 111.632 cv
211.188 112.199 212.838 111.543 212.838 110.813 cv
212.838 110.079 211.832 109.623 211.281 109.26 cv
cp
f
212.745 120.218 mo
212.651 120.859 213.749 122.229 215.029 122.868 cv
215.96 123.332 215.855 124.139 216.488 124.421 cv
218.134 125.152 219.414 124.605 220.691 123.964 cv
221.969 123.324 220.264 122.471 219.414 122.322 cv
217.858 122.047 215.941 121.408 214.206 120.401 cv
213.174 119.805 212.838 119.582 212.745 120.218 cv
cp
f
208.542 117.022 mo
208.086 116.655 207.172 116.655 207.172 117.389 cv
207.172 118.052 208.909 119.032 209.548 118.67 cv
210.186 118.303 208.999 117.389 208.542 117.022 cv
cp
f
212.015 98.6618 mo
211.776 99.3802 212.838 100.947 213.385 100.947 cv
213.931 100.947 213.385 99.4851 213.292 98.4799 cv
213.202 97.4746 212.379 97.5674 212.015 98.6618 cv
cp
f
193.565 99.3944 mo
195.299 100.306 197.034 100.765 197.581 100.493 cv
198.13 100.215 195.847 98.8448 195.388 98.1151 cv
194.935 97.3853 195.805 97.5537 196.394 97.1097 cv
197.491 96.2887 195.939 95.1006 194.658 94.3688 cv
193.76 93.8579 192.559 92.8158 192.285 93.1808 cv
192.012 93.5477 193.021 94.5631 193.105 95.0136 cv
193.333 96.1974 191.508 94.8719 190.915 95.4677 cv
189.908 96.4707 191.829 98.4799 193.565 99.3944 cv
cp
f
201.417 102.317 mo
200.687 101.861 199.681 101.586 199.411 101.861 cv
199.085 102.185 200.048 103.503 201.234 103.87 cv
202.423 104.237 203.427 104.144 203.427 103.688 cv
203.427 103.231 202.151 102.775 201.417 102.317 cv
cp
f
205.118 90.0311 mo
202.378 89.4857 201.462 88.5717 201.008 88.1155 cv
200.323 87.4305 200.691 84.6693 199.592 84.4117 cv
198.403 84.1404 196.211 84.0023 195.572 81.8557 cv
195.073 80.1769 195.572 78.6608 195.299 78.3872 cv
194.866 77.9556 194.143 79.1335 193.883 80.1667 cv
193.382 82.1781 194.022 83.7267 195.024 84.7787 cv
196.95 86.7915 198.87 86.3539 198.77 87.2455 cv
198.677 88.0688 198.951 89.0718 200.048 90.1685 cv
200.643 90.7664 203.337 91.5393 204.888 90.9918 cv
205.942 90.6189 205.683 90.1447 205.118 90.0311 cv
cp
f
193.565 73.3637 mo
193.403 74.0007 193.471 75.5089 196.211 76.1938 cv
197.222 76.4451 196.649 75.3995 196.028 74.9165 cv
195.205 74.2718 195.024 72.9967 195.388 71.9935 cv
195.755 70.9883 194.434 70.2162 194.294 69.1621 cv
194.111 67.7897 195.542 66.5404 194.935 66.3297 cv
193.746 65.9166 191.095 68.8878 192.285 71.2619 cv
192.98 72.6505 193.929 71.9001 193.565 73.3637 cv
cp
f
232.655 92.3618 mo
232.519 91.1277 231.698 92.4957 231.012 93.1808 cv
230.327 93.8665 229.095 94.1882 227.861 94.2796 cv
226.893 94.3509 225.519 94.5414 226.217 95.2366 cv
227.177 96.1974 228.592 97.0083 230.192 96.3354 cv
232.793 95.2366 232.793 93.5945 232.655 92.3618 cv
cp
f
234.439 99.7608 mo
233.753 99.7608 232.655 99.3477 232.246 100.035 cv
231.886 100.633 233.068 101.678 234.301 101.678 cv
235.533 101.678 236.494 100.035 236.083 99.4851 cv
235.671 98.9382 235.124 99.7608 234.439 99.7608 cv
cp
f
182.784 99.3477 mo
181.924 99.5197 182.372 101.265 183.332 101.541 cv
184.292 101.817 185.934 101.951 186.346 101.541 cv
186.757 101.132 183.469 99.2117 182.784 99.3477 cv
cp
f
182.784 90.4427 mo
182.784 91.2652 184.154 91.9501 184.839 91.8106 cv
185.527 91.6768 187.719 88.9358 187.169 88.5228 cv
186.619 88.1155 182.784 90.0311 182.784 90.4427 cv
cp
f
176.619 57.698 mo
175.113 57.834 171.002 59.8914 170.041 61.1219 cv
169.085 62.3546 169.906 63.4514 168.809 63.865 cv
167.714 64.2744 165.245 67.0154 164.562 68.7929 cv
163.877 70.5767 164.562 71.5337 165.112 70.5767 cv
165.846 69.2894 168.671 65.6445 170.179 65.5071 cv
171.687 65.369 172.372 63.7254 172.919 62.6288 cv
173.468 61.5335 176.758 59.3402 177.99 58.7933 cv
179.221 58.2457 178.125 57.5606 176.619 57.698 cv
cp
f
185.527 52.6263 mo
185.115 52.0794 180.353 53.6525 179.908 54.5462 cv
179.496 55.3673 181.28 56.6014 181.69 56.0522 cv
182.099 55.5056 185.934 53.174 185.527 52.6263 cv
cp
f
203.199 40.0219 mo
205.254 39.1994 209.092 38.7899 208.678 37.9667 cv
208.269 37.1455 203.199 37.2815 200.733 38.2423 cv
198.266 39.1994 198.596 40.5939 198.815 41.2544 cv
199.09 42.0778 201.145 40.8451 203.199 40.0219 cv
cp
f
210.6 38.9273 mo
208.954 39.3369 207.307 40.1601 208.269 41.3927 cv
209.134 42.5074 210.36 40.9624 211.147 40.5717 cv
212.791 39.7506 214.298 39.7506 214.024 39.1994 cv
213.749 38.6517 212.243 38.5179 210.6 38.9273 cv
cp
f
234.986 41.9396 mo
233.343 42.4893 233.616 43.4356 233.616 44.1308 cv
233.616 45.5037 235.786 44.8504 237.726 44.5446 cv
241.221 43.9955 243.548 44.2019 243.482 43.5169 cv
243.387 42.552 236.63 41.3927 234.986 41.9396 cv
cp
f
221.697 39.6102 mo
221.627 39.27 220.601 38.8791 219.981 38.8584 cv
217.792 38.7899 217.176 39.1324 217.448 40.1601 cv
217.768 41.3581 218.982 40.7278 219.981 40.4335 cv
221.148 40.0909 221.806 40.1643 221.697 39.6102 cv
cp
f
227.861 64.4119 mo
227.177 64.1363 223.589 64.9897 223.478 65.7806 cv
223.339 66.7391 224.025 67.5623 225.122 67.4243 cv
226.217 67.2867 228.675 64.7365 227.861 64.4119 cv
cp
f
221.286 81.2655 mo
219.365 81.126 219.641 81.6751 219.503 82.358 cv
219.365 83.0416 219.777 83.4547 222.243 83.0416 cv
223.098 82.9013 224.163 82.7473 224.163 81.9507 cv
224.163 81.3995 222.252 81.3326 221.286 81.2655 cv
cp
f
248.641 45.7772 mo
247.818 45.8679 247.088 45.7772 246.815 46.2335 cv
246.528 46.7112 247.635 47.8791 248.552 47.6949 cv
249.463 47.5143 250.558 45.9614 250.375 45.5945 cv
250.193 45.2296 249.463 45.6859 248.641 45.7772 cv
cp
f
259.236 52.9919 mo
259.974 52.2578 261.429 50.6201 261.064 48.9737 cv
260.769 47.6482 259.554 46.2313 259.419 48.244 cv
259.327 49.6141 258.233 50.3438 254.577 51.4405 cv
252.364 52.1038 254.81 53.5388 255.767 54.09 cv
257.5 55.096 260.059 56.7374 260.24 58.9308 cv
260.334 60.0374 259.639 60.4879 257.866 61.6695 cv
256.224 62.7662 257.516 64.791 256.77 65.6892 cv
255.854 66.7837 253.716 67.1406 252.022 67.5156 cv
250.375 67.8825 249.768 68.5418 251.656 70.0759 cv
254.577 72.4476 250.011 73.1817 252.022 73.9113 cv
254.03 74.6389 256.314 75.5535 256.588 77.9289 cv
256.755 79.3644 258.141 77.9289 257.777 75.0995 cv
257.399 72.1765 254.651 70.0176 255.767 69.5246 cv
257.227 68.8878 259.419 68.6122 260.789 67.3334 cv
262.438 65.795 258.007 63.7938 259.873 62.7662 cv
263.529 60.757 264.417 58.4408 263.071 56.4618 cv
261.701 54.4549 258.781 53.4495 259.236 52.9919 cv
cp
f
255.767 81.6751 mo
255.092 82.756 253.938 84.4117 252.661 85.0522 cv
251.381 85.6927 252.18 86.0574 253.028 85.8775 cv
254.304 85.5998 256.68 83.7749 256.953 82.5875 cv
257.227 81.3995 256.224 80.9433 255.767 81.6751 cv
cp
f
249.829 88.4335 mo
249.387 88.6969 249.646 89.0718 250.193 89.713 cv
250.742 90.3535 251.108 90.4427 251.475 90.3535 cv
251.839 90.262 251.292 89.713 251.016 89.2546 cv
250.742 88.8005 250.286 88.1602 249.829 88.4335 cv
cp
f
184.59 42.6858 mo
183.785 43.1557 183.736 44.7655 184.267 44.9295 cv
184.774 45.09 185.26 44.5345 185.934 44.0559 cv
186.61 43.5751 187.458 43.4313 187.353 43.0384 cv
187.245 42.6413 185.393 42.2115 184.59 42.6858 cv
cp
f
259.813 92.4554 mo
258.965 92.5605 259.662 94.2918 260.35 94.2918 cv
261.421 94.2918 263.456 92.3907 262.798 91.9948 cv
262.414 91.7682 261.038 92.3036 259.813 92.4554 cv
cp
f
201.008 113.736 mo
198.13 112.913 195.253 111.543 193.333 110.172 cv
191.44 108.818 191.334 110.932 192.513 112.503 cv
194.569 115.244 196.761 115.516 197.581 114.417 cv
198.815 115.106 199.09 114.695 200.185 114.967 cv
201.83 115.38 203 114.305 201.008 113.736 cv
cp
f
253.301 146.344 mo
252.842 145.979 251.928 145.979 251.928 146.709 cv
251.928 147.374 253.664 148.354 254.304 147.99 cv
254.943 147.623 253.758 146.709 253.301 146.344 cv
cp
f
347.88 314.069 mo
347.775 313.866 347.579 313.732 347.356 313.7 cv
344.148 313.27 341.287 313.765 338.763 315.008 cv
337.289 306.746 329.087 300.724 325.786 300.362 cv
325.508 300.331 325.24 300.468 325.108 300.71 cv
325.047 300.815 325.019 300.93 325.019 301.047 cv
325.019 301.196 325.068 301.346 325.165 301.473 cv
325.427 301.808 325.543 302.287 325.543 302.843 cv
325.543 304.288 324.755 306.247 323.71 307.559 cv
323.235 308.138 li
321.881 309.796 319.494 312.783 318.184 315.909 cv
315.688 313.995 312.224 313.156 307.904 313.7 cv
307.679 313.728 307.481 313.864 307.375 314.067 cv
307.272 314.272 307.272 314.509 307.381 314.709 cv
307.99 315.832 li
309.828 319.191 311.043 321.411 311.043 329.187 cv
311.043 338.334 318.482 345.774 327.628 345.774 cv
336.777 345.774 344.218 338.334 344.218 329.187 cv
344.218 321.411 345.431 319.189 347.267 315.83 cv
347.873 314.709 li
347.981 314.51 347.982 314.272 347.88 314.069 cv
cp
339.268 328.994 mo
339.268 336.101 333.989 341.461 326.987 341.461 cv
319.996 341.461 314.724 336.006 314.724 328.773 cv
314.724 323.279 313.669 320.28 312.145 317.235 cv
314.151 317.623 316.08 318.658 317.146 320.296 cv
317.116 320.729 317.089 321.161 317.089 321.583 cv
317.089 326.073 318.875 329.884 321.914 331.836 cv
321.92 331.843 321.926 331.853 321.932 331.859 cv
321.927 331.854 321.927 331.85 321.926 331.846 cv
321.975 331.879 322.009 331.929 322.06 331.959 cv
322.358 332.142 322.746 332.073 322.962 331.798 cv
323.061 331.672 323.11 331.522 323.11 331.372 cv
323.11 331.194 323.043 331.017 322.909 330.883 cv
321.468 329.438 320.203 326.385 320.203 322.534 cv
320.203 321.532 320.289 320.472 320.481 319.375 cv
321.048 316.088 324.093 312.357 325.554 310.566 cv
326.006 310.006 li
327.078 308.675 327.727 307.231 328.094 305.831 cv
330.036 307.199 333.779 310.599 333.779 317.041 cv
333.779 317.328 333.766 317.622 333.752 317.924 cv
331.925 320.307 330.896 323.531 330.896 326.761 cv
330.896 328.351 331.137 329.939 331.633 331.408 cv
331.74 331.725 332.055 331.919 332.383 331.87 cv
332.714 331.825 332.962 331.551 332.977 331.219 cv
333.16 327.204 334.466 323.398 336.466 321.037 cv
337.895 319.355 339.418 318.591 341.258 318.188 cv
340.192 320.174 339.268 323.115 339.268 328.994 cv
cp
f
310.234 287.147 mo
310.34 286.945 310.343 286.708 310.241 286.507 cv
310.136 286.305 309.942 286.167 309.717 286.139 cv
306.513 285.709 303.649 286.207 301.122 287.449 cv
299.649 279.194 291.442 273.165 288.141 272.801 cv
287.866 272.772 287.597 272.908 287.463 273.149 cv
287.402 273.255 287.374 273.373 287.374 273.486 cv
287.374 273.637 287.424 273.785 287.52 273.912 cv
287.781 274.247 287.9 274.731 287.9 275.285 cv
287.9 276.729 287.112 278.687 286.067 279.999 cv
285.615 280.554 li
284.256 282.215 281.859 285.214 280.545 288.349 cv
278.048 286.439 274.585 285.599 270.263 286.137 cv
270.036 286.164 269.837 286.301 269.732 286.504 cv
269.628 286.707 269.631 286.945 269.738 287.147 cv
270.344 288.264 li
272.18 291.63 273.393 293.857 273.393 301.63 cv
273.393 310.777 280.837 318.221 289.983 318.221 cv
299.129 318.221 306.571 310.777 306.571 301.63 cv
306.571 293.858 307.787 291.634 309.624 288.268 cv
310.234 287.147 li
cp
301.625 301.435 mo
301.625 308.542 296.346 313.9 289.342 313.9 cv
282.352 313.9 277.078 308.446 277.078 301.212 cv
277.078 295.719 276.024 292.72 274.5 289.676 cv
276.509 290.063 278.435 291.098 279.504 292.737 cv
279.472 293.169 279.444 293.6 279.444 294.025 cv
279.444 298.517 281.234 302.325 284.275 304.278 cv
284.278 304.282 284.285 304.294 284.288 304.299 cv
284.286 304.297 284.288 304.289 284.285 304.286 cv
284.333 304.318 284.367 304.368 284.419 304.399 cv
284.718 304.581 285.105 304.512 285.323 304.237 cv
285.419 304.111 285.468 303.961 285.468 303.812 cv
285.468 303.633 285.399 303.456 285.268 303.321 cv
283.825 301.882 282.558 298.829 282.558 294.973 cv
282.558 293.967 282.643 292.91 282.833 291.813 cv
283.404 288.527 286.454 284.797 287.919 283.004 cv
288.365 282.454 li
289.429 281.12 290.079 279.676 290.451 278.27 cv
292.395 279.639 296.132 283.038 296.132 289.477 cv
296.132 289.768 296.122 290.067 296.107 290.368 cv
294.282 292.751 293.253 295.975 293.253 299.202 cv
293.253 300.795 293.492 302.381 293.988 303.848 cv
294.093 304.164 294.41 304.358 294.741 304.312 cv
295.069 304.265 295.318 303.991 295.332 303.659 cv
295.517 299.642 296.82 295.837 298.822 293.481 cv
300.249 291.801 301.77 291.037 303.613 290.628 cv
302.547 292.622 301.625 295.564 301.625 301.435 cv
cp
f
272.635 259.589 mo
272.743 259.389 272.744 259.15 272.641 258.949 cv
272.537 258.747 272.341 258.609 272.115 258.581 cv
268.909 258.153 266.046 258.648 263.525 259.892 cv
262.045 251.636 253.843 245.61 250.544 245.245 cv
250.269 245.214 249.998 245.35 249.865 245.593 cv
249.806 245.699 249.778 245.814 249.778 245.93 cv
249.778 246.079 249.829 246.23 249.922 246.355 cv
250.187 246.692 250.304 247.173 250.304 247.728 cv
250.304 249.173 249.516 251.131 248.468 252.445 cv
248.021 252.992 li
246.662 254.654 244.262 257.651 242.945 260.788 cv
240.445 258.878 236.981 258.035 232.663 258.579 cv
232.436 258.606 232.237 258.745 232.132 258.947 cv
232.029 259.15 232.03 259.389 232.139 259.589 cv
232.745 260.71 li
234.585 264.075 235.796 266.297 235.796 274.073 cv
235.796 283.219 243.24 290.66 252.386 290.66 cv
261.534 290.66 268.973 283.219 268.973 274.073 cv
268.973 266.302 270.188 264.08 272.024 260.715 cv
272.635 259.589 li
cp
264.027 273.879 mo
264.027 280.981 258.747 286.341 251.748 286.341 cv
244.754 286.341 239.482 280.887 239.482 273.655 cv
239.482 268.167 238.427 265.162 236.903 262.118 cv
238.908 262.507 240.836 263.541 241.907 265.179 cv
241.874 265.612 241.848 266.047 241.848 266.469 cv
241.848 270.955 243.634 274.767 246.674 276.723 cv
246.678 276.729 246.684 276.739 246.691 276.746 cv
246.687 276.742 246.691 276.737 246.687 276.733 cv
246.736 276.766 246.769 276.817 246.821 276.847 cv
247.116 277.029 247.506 276.96 247.722 276.687 cv
247.822 276.56 247.87 276.409 247.87 276.259 cv
247.87 276.082 247.801 275.904 247.667 275.773 cv
246.226 274.325 244.961 271.268 244.961 267.414 cv
244.961 266.411 245.046 265.353 245.238 264.257 cv
245.81 260.964 248.864 257.23 250.329 255.436 cv
250.767 254.895 li
251.835 253.564 252.484 252.118 252.855 250.712 cv
254.796 252.08 258.533 255.48 258.533 261.915 cv
258.533 262.204 258.522 262.505 258.506 262.807 cv
256.681 265.194 255.654 268.414 255.654 271.645 cv
255.654 273.239 255.893 274.823 256.389 276.296 cv
256.494 276.609 256.811 276.804 257.139 276.757 cv
257.469 276.708 257.717 276.438 257.733 276.106 cv
257.916 272.087 259.223 268.281 261.222 265.92 cv
262.65 264.242 264.174 263.477 266.016 263.071 cv
264.948 265.06 264.027 268 264.027 273.879 cv
cp
f
234.471 286.139 mo
231.27 285.709 228.41 286.207 225.88 287.449 cv
224.404 279.194 216.203 273.165 212.9 272.801 cv
212.625 272.772 212.359 272.908 212.221 273.149 cv
212.163 273.255 212.134 273.373 212.134 273.486 cv
212.134 273.637 212.183 273.785 212.278 273.912 cv
212.542 274.247 212.66 274.731 212.66 275.285 cv
212.66 276.729 211.873 278.687 210.823 279.997 cv
210.364 280.56 li
209.009 282.222 206.615 285.218 205.301 288.349 cv
202.804 286.439 199.342 285.599 195.02 286.137 cv
194.792 286.164 194.594 286.301 194.49 286.504 cv
194.385 286.707 194.386 286.945 194.497 287.147 cv
195.1 288.268 li
196.941 291.633 198.153 293.857 198.153 301.63 cv
198.153 310.777 205.596 318.221 214.744 318.221 cv
223.89 318.221 231.333 310.777 231.333 301.63 cv
231.333 293.854 232.545 291.629 234.384 288.264 cv
234.99 287.147 li
235.1 286.945 235.1 286.708 234.998 286.507 cv
234.895 286.305 234.698 286.167 234.471 286.139 cv
cp
226.383 301.435 mo
226.383 308.542 221.105 313.9 214.102 313.9 cv
207.113 313.9 201.839 308.446 201.839 301.212 cv
201.839 295.725 200.785 292.722 199.258 289.674 cv
201.267 290.063 203.193 291.098 204.264 292.735 cv
204.23 293.171 204.202 293.603 204.202 294.028 cv
204.202 298.517 205.991 302.328 209.03 304.278 cv
209.034 304.282 209.042 304.294 209.047 304.299 cv
209.043 304.297 209.045 304.289 209.043 304.286 cv
209.092 304.318 209.127 304.368 209.177 304.399 cv
209.474 304.581 209.862 304.512 210.077 304.237 cv
210.179 304.111 210.228 303.961 210.228 303.812 cv
210.228 303.633 210.158 303.456 210.025 303.322 cv
208.581 301.882 207.316 298.829 207.316 294.973 cv
207.316 293.967 207.401 292.91 207.591 291.813 cv
208.167 288.522 211.216 284.79 212.684 282.995 cv
213.123 282.454 li
214.191 281.115 214.84 279.672 215.21 278.272 cv
217.152 279.64 220.892 283.04 220.892 289.48 cv
220.892 289.769 220.882 290.067 220.865 290.368 cv
219.041 292.751 218.011 295.975 218.011 299.206 cv
218.011 300.795 218.25 302.381 218.745 303.848 cv
218.853 304.164 219.166 304.358 219.497 304.312 cv
219.826 304.265 220.075 303.991 220.09 303.659 cv
220.273 299.644 221.578 295.838 223.582 293.481 cv
225.004 291.803 226.529 291.039 228.37 290.628 cv
227.304 292.616 226.383 295.555 226.383 301.435 cv
cp
f
196.827 313.7 mo
193.616 313.27 190.758 313.768 188.237 315.008 cv
186.761 306.746 178.559 300.724 175.257 300.362 cv
174.982 300.331 174.715 300.468 174.579 300.71 cv
174.521 300.815 174.491 300.93 174.491 301.047 cv
174.491 301.196 174.54 301.346 174.636 301.473 cv
174.898 301.808 175.016 302.287 175.016 302.843 cv
175.016 304.288 174.228 306.247 173.18 307.559 cv
172.724 308.12 li
171.365 309.78 168.972 312.773 167.658 315.909 cv
165.161 313.998 161.696 313.156 157.375 313.7 cv
157.149 313.728 156.949 313.864 156.845 314.067 cv
156.74 314.269 156.744 314.509 156.851 314.709 cv
157.459 315.829 li
159.296 319.189 160.51 321.411 160.51 329.187 cv
160.51 338.334 167.95 345.774 177.097 345.774 cv
186.246 345.774 193.688 338.334 193.688 329.187 cv
193.688 321.413 194.902 319.194 196.738 315.832 cv
197.347 314.709 li
197.456 314.51 197.456 314.272 197.355 314.069 cv
197.252 313.866 197.055 313.732 196.827 313.7 cv
cp
188.739 328.994 mo
188.739 336.101 183.461 341.461 176.46 341.461 cv
169.469 341.461 164.195 336.006 164.195 328.773 cv
164.195 323.285 163.141 320.283 161.617 317.235 cv
163.623 317.622 165.549 318.658 166.62 320.296 cv
166.587 320.729 166.559 321.161 166.559 321.583 cv
166.559 326.073 168.347 329.884 171.388 331.836 cv
171.394 331.843 171.399 331.854 171.404 331.859 cv
171.399 331.857 171.401 331.85 171.399 331.846 cv
171.448 331.879 171.48 331.929 171.533 331.959 cv
171.831 332.142 172.218 332.073 172.433 331.798 cv
172.535 331.672 172.584 331.522 172.584 331.372 cv
172.584 331.194 172.515 331.017 172.381 330.883 cv
170.937 329.438 169.672 326.381 169.672 322.53 cv
169.672 321.527 169.757 320.47 169.949 319.375 cv
170.52 316.075 173.577 312.339 175.045 310.544 cv
175.482 310.006 li
176.549 308.672 177.197 307.231 177.566 305.831 cv
179.508 307.199 183.246 310.599 183.246 317.035 cv
183.246 317.324 183.238 317.621 183.22 317.924 cv
181.398 320.307 180.367 323.529 180.367 326.758 cv
180.367 328.351 180.606 329.939 181.106 331.408 cv
181.21 331.725 181.527 331.919 181.855 331.87 cv
182.183 331.825 182.434 331.551 182.447 331.219 cv
182.63 327.204 183.935 323.399 185.938 321.037 cv
187.367 319.355 188.89 318.591 190.729 318.188 cv
189.661 320.174 188.739 323.115 188.739 328.994 cv
cp
f
221.279 188.489 mo
221.206 186.839 li
148.748 186.839 li
148.676 188.489 li
146.827 229.999 157.754 255.344 184.109 270.668 cv
184.977 271.17 li
185.845 270.668 li
212.198 255.344 223.123 230.001 221.279 188.489 cv
cp
184.977 267.1 mo
179.334 263.715 174.452 259.82 170.303 255.344 cv
159.282 242.171 154.027 224.158 154.027 199.414 cv
154.027 197.141 154.1 194.778 154.19 192.39 cv
156.933 192.39 207.912 192.39 217.917 192.39 cv
217.966 193.983 218.025 195.59 218.025 197.123 cv
218.025 231.728 207.615 253.52 184.977 267.1 cv
cp
f
356.008 188.489 mo
355.966 187.567 355.204 186.839 354.28 186.839 cv
285.126 186.839 li
284.203 186.839 283.442 187.567 283.401 188.489 cv
281.553 229.999 292.484 255.344 318.839 270.668 cv
319.374 270.98 320.039 270.98 320.574 270.668 cv
346.926 255.344 357.854 229.999 356.008 188.489 cv
cp
319.707 267.1 mo
314.069 263.72 309.189 259.827 305.04 255.355 cv
294.011 242.179 288.752 224.158 288.752 199.396 cv
288.752 197.129 288.826 194.769 288.912 192.39 cv
291.657 192.39 342.642 192.39 352.642 192.39 cv
352.692 193.987 352.752 195.597 352.752 197.133 cv
352.752 231.731 342.342 253.52 319.707 267.1 cv
cp
f
206.635 240.678 mo
205.003 239.043 li
201.292 235.332 li
201.292 207.439 li
201.292 207.005 201.119 206.587 200.811 206.277 cv
199.179 204.646 li
193.031 198.495 li
192.389 197.855 191.348 197.855 190.706 198.495 cv
184.56 204.646 li
183.919 205.284 183.919 206.33 184.56 206.969 cv
187.68 210.09 li
187.68 233.338 li
182.71 238.308 li
179.735 235.332 li
179.735 207.439 li
179.735 207.005 179.561 206.587 179.255 206.277 cv
177.623 204.646 li
171.477 198.495 li
170.832 197.855 169.792 197.855 169.151 198.495 cv
163.003 204.646 li
162.363 205.284 162.363 206.33 163.003 206.969 cv
166.121 210.09 li
166.121 237.981 li
166.121 238.417 166.295 238.837 166.604 239.147 cv
175.829 248.37 li
178.134 250.677 li
179.767 252.311 li
180.078 252.621 180.494 252.796 180.931 252.796 cv
181.369 252.796 181.786 252.621 182.093 252.311 cv
188.241 246.163 li
188.241 246.163 190.336 244.065 191.71 242.695 cv
198.166 249.151 li
198.474 249.461 198.891 249.632 199.327 249.632 cv
199.763 249.632 200.181 249.461 200.489 249.151 cv
206.635 243.005 li
207.28 242.358 207.28 241.318 206.635 240.678 cv
cp
168.59 237.643 mo
168.59 209.407 li
168.59 209.068 li
168.348 208.825 li
165.33 205.807 li
170.313 200.822 li
175.636 206.145 li
175.636 234.383 li
175.636 234.724 li
175.88 234.965 li
182.132 241.214 li
182.71 241.797 li
183.29 241.214 li
189.903 234.604 li
190.146 234.363 li
190.146 234.023 li
190.146 209.407 li
190.146 209.068 li
189.903 208.825 li
186.887 205.807 li
191.869 200.822 li
197.193 206.145 li
197.193 234.383 li
197.193 234.724 li
197.436 234.965 li
202.677 240.207 li
197.833 245.052 li
191.547 238.985 li
191.517 239.017 li
190.657 238.154 li
190.077 237.574 li
189.493 238.154 li
184.863 242.787 li
184.863 242.787 180.829 246.821 179.298 248.354 cv
168.59 237.643 li
cp
f
337.137 220.153 mo
336.705 219.67 336.253 219.19 335.741 218.722 cv
340.396 215.093 li
341.115 214.54 341.254 213.508 340.702 212.787 cv
339.367 211.055 li
339.354 211.037 339.352 211.015 339.339 210.996 cv
327.648 195.799 li
327.095 195.079 326.061 194.946 325.344 195.499 cv
315.737 202.884 li
311.261 198.408 li
310.953 198.098 310.533 197.928 310.1 197.928 cv
309.662 197.928 309.244 198.098 308.934 198.408 cv
302.79 204.557 li
302.482 204.865 302.31 205.282 302.31 205.718 cv
302.31 206.152 302.482 206.574 302.79 206.879 cv
305.906 210.001 li
305.906 243.241 li
304.306 244.702 303.019 246.303 302.204 247.933 cv
301.889 248.569 302.013 249.335 302.517 249.836 cv
304.142 251.46 li
304.144 251.464 304.144 251.466 304.146 251.468 cv
306.157 253.475 li
306.488 253.805 306.938 253.984 307.401 253.956 cv
307.868 253.93 308.302 253.71 308.593 253.349 cv
314.086 246.588 322.149 247.856 327.691 252.113 cv
328.204 252.503 328.889 252.56 329.459 252.262 cv
333.637 250.065 343.353 243.862 343.353 233.816 cv
343.353 229.873 342.134 224.609 337.137 220.153 cv
cp
308.081 244.592 mo
308.268 244.434 308.374 244.205 308.374 243.963 cv
308.374 209.318 li
308.374 209.102 308.285 208.892 308.134 208.738 cv
305.117 205.718 li
310.1 200.736 li
315.015 205.651 li
315.307 205.943 315.772 205.976 316.099 205.72 cv
326.193 197.956 li
336.882 211.85 li
330.64 216.646 li
330.426 216.814 330.308 217.076 330.325 217.345 cv
330.336 217.615 330.489 217.861 330.719 218.004 cv
336.381 221.424 339.251 226.196 339.251 232.182 cv
339.251 240.574 331.092 246.039 327.116 248.21 cv
321.022 243.785 311.992 242.454 305.656 249.491 cv
304.703 248.535 li
305.482 247.171 306.626 245.818 308.081 244.592 cv
cp
316.451 239.97 mo
318.67 239.394 323.038 238.733 327.4 240.74 cv
327.703 240.884 328.063 240.824 328.306 240.596 cv
330.922 238.152 332.164 235.076 331.993 231.46 cv
331.743 226.227 327.477 222.962 323.902 221.751 cv
323.648 221.667 323.369 221.71 323.152 221.866 cv
315.762 227.279 li
315.549 227.43 315.426 227.677 315.426 227.939 cv
315.426 239.171 li
315.426 239.425 315.54 239.666 315.743 239.822 cv
315.945 239.978 316.205 240.031 316.451 239.97 cv
cp
327.336 238.057 mo
324.917 237.146 322.244 236.818 319.524 237.018 cv
319.524 230.406 li
325.492 226.039 li
326.341 226.404 327.175 226.889 327.934 227.481 cv
328.837 228.636 329.453 230.009 329.525 231.576 cv
329.647 234.087 328.909 236.261 327.336 238.057 cv
cp
315.873 223.883 mo
316.15 224.023 316.483 223.994 316.733 223.814 cv
329.145 214.73 li
329.323 214.603 329.443 214.404 329.474 214.185 cv
329.505 213.965 329.444 213.743 329.309 213.567 cv
322.465 204.666 li
322.185 204.305 321.671 204.238 321.311 204.516 cv
315.743 208.795 li
315.54 208.951 315.426 209.191 315.426 209.445 cv
315.426 223.149 li
315.426 223.461 315.595 223.743 315.873 223.883 cv
cp
319.524 218.717 mo
319.524 211.889 li
322.907 209.288 li
326.328 213.735 li
319.524 218.717 li
cp
f
215.197 388.715 mo
215.197 391.715 215.302 391.922 219.856 392.234 cv
219.856 393.685 li
205.103 393.685 li
205.103 392.234 li
209.659 391.922 209.761 391.715 209.761 388.715 cv
209.761 367.281 li
209.761 365.212 209.554 365.002 208.106 364.948 cv
204.688 364.746 li
204.688 363.4 li
208.106 362.728 211.52 361.795 215.197 360.759 cv
215.197 388.715 li
cp
f
234.196 374.217 mo
230.674 372.56 227.773 370.802 227.773 367.385 cv
227.773 365.314 229.018 362.728 232.018 362.728 cv
234.092 362.728 236.578 364.487 236.578 368.213 cv
236.578 371.524 235.334 373.284 234.196 374.217 cv
cp
232.537 360.759 mo
226.893 360.759 222.808 364.948 222.808 369.66 cv
222.808 373.077 225.394 375.668 228.605 377.323 cv
227.052 378.048 224.566 379.497 223.737 380.322 cv
222.808 381.259 221.668 382.812 221.668 385.61 cv
221.668 391.197 226.223 394.301 232.018 394.301 cv
236.679 394.301 242.787 390.991 242.787 384.36 cv
242.787 379.706 239.473 377.116 235.851 375.15 cv
238.233 373.697 239.527 372.664 239.993 372.149 cv
240.926 371.11 241.441 369.66 241.441 368.159 cv
241.441 364.02 237.82 360.759 232.537 360.759 cv
cp
232.643 392.338 mo
229.847 392.338 226.948 389.849 226.948 385.402 cv
226.948 382.187 228.292 379.601 230.571 378.255 cv
234.196 380.119 237.508 382.086 237.611 386.227 cv
237.611 390.162 235.747 392.338 232.643 392.338 cv
cp
f
249.829 381.984 mo
252.727 376.7 255.729 371.943 258.627 367.591 cv
258.731 367.591 li
258.731 381.984 li
249.829 381.984 li
cp
260.905 361.068 mo
255.936 367.696 250.966 375.15 245.79 383.12 cv
245.79 384.88 li
258.731 384.88 li
258.731 388.715 li
258.731 391.715 258.627 391.922 254.071 392.234 cv
254.071 393.685 li
268.357 393.685 li
268.357 392.234 li
264.218 391.922 264.115 391.715 264.115 388.715 cv
264.115 384.88 li
268.877 384.88 li
268.877 381.984 li
264.115 381.984 li
264.115 361.068 li
260.905 361.068 li
cp
f
284.51 392.338 mo
281.195 392.338 278.609 387.984 278.609 381.571 cv
278.609 379.811 278.609 378.563 278.918 377.323 cv
280.058 376.803 281.402 376.495 282.853 376.495 cv
286.995 376.495 289.062 380.429 289.062 384.726 cv
289.062 388.504 288.237 392.338 284.51 392.338 cv
cp
293.106 360.448 mo
291.343 360.655 287.925 361.43 286.009 362.105 cv
280.368 364.071 272.708 370.078 272.708 381.36 cv
272.708 389.438 277.469 394.301 283.577 394.301 cv
290.052 394.301 294.656 389.023 294.656 382.759 cv
294.656 377.223 290.826 373.077 285.235 373.077 cv
284.199 373.077 283.269 373.496 282.128 374.013 cv
279.229 375.462 li
280.678 368.626 285.079 365.16 287.978 363.814 cv
289.79 362.983 291.756 362.312 293.415 362.001 cv
293.106 360.448 li
cp
f
gsave
nclp
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
